<html>
<head>
<title>Смарт-шейпы</title>
<meta name="GENERATOR" content="MSHTML 5.00.2614.3500">
<meta content="text/html; charset=windows-1251" http-equiv="Content-Type">
<LINK REL="STYLESHEET" HREF="vis.css">
</head>
<body bgcolor="white">
<table width="100%"><tr>
<td width="20%" align="center"><a href="../index.htm"><IMG SRC="../images/vl1.png" WIDTH="230" HEIGHT="130" BORDER="0" ALT=""></a>&nbsp;</td>
<td width="10%" align="center">&nbsp;</td>
<td class='menutd' width="70%" align="center">
 <a class="menu" href="http://visio.getbb.ru/">Форум visio.getbb.ru</a> |
 <a class="menu" href="../reg.htm">О форумах</a>
<!-- 
 <a class="menu" href="../forum/default.asp">форум visio.artberg.ru</a> |
 <a class="menu" href="../f_rubr/top.htm">Указатель artberg</a>
--> 
<br/>
 <a class="menu" href="../bib.htm">Библиотека</a> |
 <a class="menu" href="../faq.htm">Частые вопросы</a> |
 <a class="menu" href="../bookpdf.htm">Литература</a> |
 <a class="menu" href="../loading.htm">Склад материалов</a>
<br/>
 <a class="menu" href="http://visio-all.blogspot.ru/p/blog-page.html">Полезные ссылки</a> |
 <a class="menu" href="../site.htm">О сайте</a>
<br/>
 <a class="menu" href="../visicorp.htm">История Visio</a> |
 <a class="menu" href="../product.htm">Продукты Visio</a>
</td></tr></table>
<table width="100%" cellpadding="0" cellspacing="0" class="min"><tr><td width="10%" align="center">&nbsp;</td>
	<td width="90%">&nbsp;&nbsp;Для русскоязычных пользователей Visio. Начинающих и профессионалов.
Где взять, как сделать, что купить и т.д.
</td></tr></table>
<!-- --------------------------- -->
<img alt height="2" src="spacer.gif" width="1"><BR>
<!-- Внутренняя табл. для чужого текста -->
<table border="0" cellpadding="20" cellspacing="0" width="100%">
<tr><td width="100%" bgcolor="FFFFFF">
<!-- --------------------------- -->

<h1>Смарт-шейпы</h1>

<p align="right">Туманов Г.Е.</p>
<p align="right"><i>Из серии статей о Visio и автоматизации</i></p>

<p align="Justify">Сегодня мы посмотрим, как создаются интеллектуальные шейпы.</p>
<p align="Justify">К этому типу относится больше половины шейпов из трафаретов, поставляемых
в составе Visio. Это не просто картинки, а разумные картинки, поэтому с ними так
легко работать. Естественно, когда-то возникает желание научиться и самому делать
такие же, но ориентированные на нужное вам применение.</p>
<p align="Justify">Основой управления шейпами является шейп-лист (ShapeSheet).
Это просто таблица, в которой хранятся все данные о шейпе. В Visio - каждый шейп,
группа, стиль, страница, документ - имеют свой шейп-лист. Там содержатся такие данные,
как высота, ширина, угол, цвет и другие атрибуты, определяющие вид и поведение шейпа.
Шейп-лист разбит на секции, в каждой секции несколько строк, в строке несколько ячеек.
Ячейка может содержать либо константу, либо формулу, значение которой зависит от других
ячеек или от свойств других объектов Visio. При построении формул могут использоваться
встроенные функции, (математические, статистические, преобразование типов и т.д.).</p>
<p align="Justify">Собственно говоря, в Visio сделано все, чтобы можно было обойтись
без этой статьи. Дело в том, что все изменения на странице рисунка тут же отображаются
в шейп-листе. Открыв одновременно и рисунок и шейп-лист можно изменять шейп на странице
рисунка и наблюдать, как это проявляется в ячейках шейп-листа. Соответственно, действует
и обратный процесс, что позволяет легко набирать экспериментальные данные, даже если
вы не любите читать документацию.</p>
<p align="Justify">Шейп-лист открывается через меню Window/Show ShapeSheet.
Причем открывается шейп-лист выбранного в данный момент шейпа. Если шейп не выбран,
откроется шейп-лист страницы рисунка. Для открытия другого шейп-листа нужно вернуться
к странице рисунка, выбрать другой шейп и повторить команду открытия Window/Show ShapeSheet.</p>
<p align="Justify">И последний вводный момент. Иногда в шейп-листе вы не видите нужной
секции, значит либо нужно попросить вывести ее (например, в меню View/Sections
щелкнуть по кнопке All), либо ввести какие-то данные, чтобы было что показывать
в этой секции (например, секция Text Fields не показывается, пока шейп не содержит
поля, вводимого через меню Insert/Fields…).</p>
<p align="Justify">А теперь переходим к примерам.</p>
<p align="Justify"><b>1. Сделаем стрелку, автоматически измеряющую то, к чему мы ее приклеим.</b></p>
<table border="0" width="92%">
<tr><td Width="25%" align="center">
<img src="../images/ris03001.gif" height="51" width="115" alt="" border="0"../></td>
<td><p align="Justify">Сначала нарисуем две размерные линии, соединим их и выберем
оформление типа 13 (стрелки) для обоих концов соединяющей линии. Для размещения
соответствующего текста нужно:</p>
</td></tr></table>
<ul>
<li>выбрать горизонтальную линию;</li>
<li>через меню Insert/Field вставить поле Geometry/Width, выбрав для значения
Format: третью строчку "0".</li>
</ul>
<p align="Justify">Непосредственно на горизонтальной линии появляется оцифровка,
показывающая ее длину. Контролируем эти изменения в шейп-листе. Мы обнаруживаем
там секцию Text Fields, имеющую два поля Format: со значением FieldPicture(2) и
Value: со значением width. Данный формат указывает, что нам нужны только целые
значения оцифровки. Можно было при установке поля выбрать другой формат, и он
отразился бы в этой ячейке. Значение Width говорит о том, что в текстовом поле
будет отображаться ширина горизонтальной стрелки в тех единицах измерения, которые
выбраны для страницы рисунка.</p>
<p align="Justify">Если для страницы рисунка в качестве единиц измерения выбраны,
например, дюймы, а нам нужно измерять отрезки в сантиметрах, то нужно изменить эту
формулу. Щелкаем мышью по ячейке шейп-листа с надписью Width и видим, как наверху
в поле формулы появляется текст =Width. Ставим туда курсор и дописываем формулу =Width/25,4.
Для принятия формулы нужно щелкнуть по соседней кнопке с галочкой и всплывающей
подписью Accept. Теперь на стрелке мы получим значение в нужных единицах измерения.</p>
<p align="Justify">Желательно цифры располагать не на стрелке, а над ней. Текст
можно сместить средством Text Block Tool, а можно просто в секции Text Transform
в ячейку TxtPinY шейп-листа ввести значение 2,5 mm. Это значит, что центр текста
будет располагаться на 2,5 мм выше центра размерной линии.</p>
<p align="Justify">Группируем получившуюся конструкцию. Группа обладает свойствами
2-D шейпа, то есть получился прямоугольник, который не будет работать в качестве
коннектора, а это нужное свойство при измерении. Поэтому переключаем Interaction
Style в меню Format/Behavior на Line (1-dimensional).</p>
<p align="Justify">Теперь прямоугольник считается линией, имеющей начало и конец,
только они расположены не в тех местах, которые нам нужны, а посредине вертикальных
черточек. Для смещения начала и конца линии нужно выбрать группу, открыть ее шейп-лист
и в секции Shape Transform изменить формулу в ячейке LocPinY с Height*0,5 на Height*0.
Тем самым мы переносим центр вращения в самый низ группы.</p>
<table border="0" width="92%">
<tr><td Width="30%" align="center">
<p align="Center"><img src="../images/ris03002.gif" height="127" width="165" alt="" border="0"../></p>
</td><td><p align="Justify">Осталось только проверить результат. Помещаем на страницу рисунка
квадрат, прицепляем к его углам нашу стрелку и начинаем менять его размеры.
Мы видим, что они тут же отслеживаются цифрами над стрелкой. Дублируем стрелку,
поворачиваем ее на 90 градусов и цепляем к вертикальной стороне квадрата. С удовольствием
наблюдаем, как стрелки следуют за квадратом и измеряют его.</p>
</td></tr></table>
<p align="Justify"><b>2. Прямоугольник, длина которого отслеживает введенное число.</b></p>
<p align="Justify">Рисуем прямоугольник и начинаем его настраивать.</p>
<img src="../images/ris03003.gif" height="21" width="153" alt="" border="0"../>
<p align="Justify">Каждому шейпу можно приписать в любом количестве пользовательские
свойства. Воспользуемся этим. Выбираем наш прямоугольник и через меню Shape/Custom
Properties, нажав на кнопку Yes, переходим к созданию свойства под названием "Значение".
Заполнив три поля как показано на рисунке, нажимаем кнопку OK.</p>
<table border="0" width="92%">
<tr><td Width="30%" align="center">
<img src="../images/ris03004.gif" height="181" width="185" alt="" border="0"../></td>
<td><p align="Justify">В шейп-листе теперь можно найти секцию Custom Properties, в
строке Prop.Row_1 которой имеются ячейки Label, содержащая метку "Значение", и
Value, куда мы ввели значение "1".</p>
<p align="Justify">Нам нужно, чтобы ширина прямоугольника отслеживала значение
ячейки Value. Для этого в ячейку Width секции Shape Transform помещаем формулу
=Prop.Row_1/2,54. Более строго было бы написать Prop.Row_1.Value, но ячейка Value
является в данной секции значением по умолчанию, поэтому она выбирается автоматически
при указании секции. 2,54 нужно, чтобы пересчитать введенное значение из дюймов в
сантиметры (вводится оно в дюймах). Чуть ниже мы исправим эту формулу, но об этом
в свое время.</p>
</td></tr></table>
<p align="Justify">Если теперь через меню Shape/Custom Properties изменить значение
на 2, то наш прямоугольник станет вдвое шире. Однако при этом центр его остается
на месте, а оба конца уползают в стороны. Для гистограммы такое поведение нас не
устраивает. Желательно, чтобы левый конец оставался на месте, а перемещался только
правый. Для этого нужно сместить центр вращения шейпа в крайнюю левую точку - ввести
в ячейку LocPinX секции Shape Transform вместо формулы =Width*0,5 формулу =Width*0.
Можно добавить и оцифровку. Для этого стандартным способом включаем поле
Insert/Fields/Custom Properties/Значение/Format=0. Подвешиваем оцифровку над
прямоугольником путем ввода в шейп-лист секцию Text Transform ячейку TxtPinY
формулы =Height*1,5.</p>
<p align="Justify">Получилось уже почти то, что нужно. Вот только при дублировании
шейпа значение Width переопределяется и шейп теряет приданные ему свойства. Чтобы
этого не происходило, нужно опять вернуться к ячейке Width секции Shape Transform
и поставить туда защиту формулы =Guard(Prop.Row_1/2,54). Такой шейп можно спокойно
дублировать.</p>
<table border="0" width="92%">
  <tr><td width="30%" align="center"><img src="../images/ris03005.gif" height="80" width="153" alt="" border="0"../></td>
  <td><p align="Justify">Проверяем эффект. Выбираем шейп, выбираем Shape/Custom Properties,
изменяем значение - наблюдаем изменение длины и новую оцифровку.</p>
 </td></tr>
</table>

<p align="Justify"><b>3. Постоянная ориентация текста</b></p>
<p align="Justify">В двух разобранных примерах текст поворачивался вместе с шейпом.
Однако иногда необходимо сделать так, чтобы шейп поворачивался, а текст оставался
в том же положении.</p>
<table border="0" width="92%">
  <tr><td width="25%" align="center"><img src="../images/ris03006.gif" height="64" width="170" alt="" border="0"../></td>
  <td><p align="Justify">На этом рисунке показаны линии, индицирующие свою длину.
  Сделаны они примерно так же, как и размерная стрелка в первом примере (только
  вместо сложной группы использована всего одна линия). В секцию Text Transform
  в ячейку TxtAngle введена формула =-Angle. Ячейка Angle расположена в секции
  Shape Transform и показывает угол поворота шейпа, значит ссылкой на эту ячейку со
  знаком минус мы заставляем текст повернуться на такой же угол в обратную сторону,
  что и дает нужный эффект.</p>
 </td></tr>
</table>
<p align="Justify">Все три приведенных примера в виде рисунка Visio можно взять
в архиве <a href="Source1.zip">Source1.zip.</a></p>
<p align="Justify"><b>4. Позиционирование штампа чертежа.</b></p>
<p align="Justify">Усложним задачу. Заставим шейп следить не только за своими
параметрами, но еще искать и использовать параметры другого шейпа и страницы рисунка.</p>
<p align="Justify">Такая задача возникает, например, если мы хотим нарисовать
универсальный штамп с рамкой для чертежа по требованиям ЕСКД. Внешнюю рамку допускается
не использовать. Для усложнения задачи считаем, что требования к полям могут меняться
в зависимости от используемого принтера. Таким образом, имеем два основных объекта:</p>
<ul>
<li>внутренняя рамка;</li>
<li>основной штамп.</li>
</ul>
<p align="Justify">У внутренней рамки зададим пользовательские свойства - поля.
Будем позиционировать ее по размеру рисунка и величинам полей. Установим минимальную
ширину рамки 185 мм и если заданные поля не обеспечивают минимальной ширины, пусть
нарушается условие левой границы. То есть, если на формате А4 установить левое поле
20 мм, а правое 6 мм, то рамка должна сама переставить левое поле на 19 мм.</p>
<p align="Justify">Штамп будем позиционировать по рамке, связывая их правыми нижними углами.</p>
<p align="Justify">Таким образом в шейп-листе рамки должны быть установлены:</p>
<p>- в секции Custom Properties:</p>
<table border="0" width="60%">
  <tr><td width="25%">&nbsp</td><td width="25%">Label</td><td width="25%">Type</td><td width="25%">Value</td></tr>
  <tr><td>Prop.Row_1</td><td>"Нижнее поле"../td><td>2</td><td>6</td></tr>
  <tr><td>Prop.Row_2</td><td>"Правое поле"../td><td>2</td><td>6</td></tr>
  <tr><td>Prop.Row_3</td><td>"Верхнее поле"../td><td>2</td><td>6</td></tr>
  <tr><td>Prop.Row_4</td><td>"Левое поле"../td><td>2</td><td>19</td></tr>
</table>
<p>- в секции Scratch:</p>
<table border="0" width="60%">
  <tr><td width="10%">A1</td><td width="90%">=FORMATEX(Prop.Row_1;"0.000 u";"mm";"ft")</td></tr>
  <tr><td>B1</td><td>=FORMATEX(Prop.Row_2;"0.000 u";"mm";"ft")</td></tr>
  <tr><td>C1</td><td>=FORMATEX(Prop.Row_3;"0.000 u";"mm";"ft")</td></tr>
  <tr><td>D1</td><td>=FORMATEX(Prop.Row_4;"0.000 u";"mm";"ft")</td></tr>
  <tr><td>A2</td><td>=ThePage!PageWidth-(Scratch.D1+Scratch.B1)</td></tr>
</table>
<p>- в секции Shape Transform:</p>
<table border="0" width="60%">
  <tr><td width="10%">Width</td><td>=GUARD(if(Scratch.A2<(185/25.4); 185/25.4; Scratch.A2))</td></tr>
  <tr><td width="10%">Height</td><td>=GUARD(ThePage!PageHeight-(Scratch.A1+Scratch.C1))</td></tr>
  <tr><td width="10%">Angle</td><td>=GUARD(0)</td></tr>
  <tr><td width="10%">PinX</td><td>=GUARD(ThePage!PageWidth-Scratch.B1)</td></tr>
  <tr><td width="10%">PinY</td><td>=GUARD(Scratch.A1)</td></tr>
  <tr><td width="10%">LocPinX</td><td>=GUARD(Width)</td></tr>
  <tr><td width="10%">LocPinY</td><td>=GUARD(0)</td></tr>
</table>
<p>В шейп-листе штампа установлены:</p>
<p>- в секции Shape Transform:</p>
<table border="0" width="60%">
  <tr><td width="10%">PinX</td><td>=GUARD(Scratch.C1&Scratch.B1)</td></tr>
  <tr><td width="10%">PinY</td><td>=GUARD(Scratch.C1&Scratch.D1)</td></tr>
  <tr><td width="10%">LocPinX</td><td>=GUARD(Width)</td></tr>
  <tr><td width="10%">LocPinY</td><td>=GUARD(0)</td></tr>
</table>
<p>- в секции Scratch:</p>
<table border="0" width="60%">
  <tr><td width="10%">B1</td><td>="!PinX"../td></tr>
  <tr><td width="10%">C1</td><td>=""../td></tr>
  <tr><td width="10%">D1</td><td>="!PinY"../td></tr>
</table>
<p>- в секции Scratch:</p>
<table border="0" width="60%">
  <tr><td width="10%">EventDrop</td><td>=SETF(GetRef(Scratch.C1);"""Рамка чертежа""")</td></tr>
  <tr><td width="10%">EventDblClick</td><td>=SETF(GetRef(Scratch.C1);"""Рамка чертежа""")</td></tr>
</table>
<p>Что это значит:</p>
<p align="Justify">В секции Custom Properties устанавливаются вводимые поля для
рамки, причем значения вводятся в миллиметрах. Дальше Visio считает в дюймах.
Для перевода значений из миллиметров в дюймы создается секция Scratch, в ячейках
A1-D1 которой с помощью функции FORMATEX производится преобразование единиц измерения,
а в ячейке A2 рассчитывается теоретическая ширина рамки в зависимости от ширины
страницы рисунка и величины полей. При ссылке на другой объект (страницу рисунка)
он отделяется восклицательным знаком (ThePage!PageWidth).</p>
<p align="Justify">В секции Shape Transform вычисляется ширина рамки. Теоретическая
ширина рамки либо принимается (если она больше 185 мм), либо заменяется величиной 185 мм.</p>
<p align="Justify">Высота рамки рассчитывается простым вычитанием вертикальных
полей из высоты страницы рисунка. В качестве центра вращения (PinX, PinY - его
координаты относительно страницы) устанавливается правый нижний угол. Его локальными
координатами являются LocPinX, LocPinY. Все перечисленные ячейки секции защищаются
от изменения.</p>
<p align="Justify">Ситуация с штампом несколько сложнее. Мы поставили себе задачу
привязать его координаты к координатам рамки. Если бы разговор шел о шейпах,
расположенных на листе рисунка, то такая привязка достигалась бы простой ссылкой на
ячейку другого объекта PinX=GUARD(Рамка чертежа!PinX). Но если мы хотим разместить
штамп в трафарете в качестве мастер-шейпа, то Visio не позволит поставить ссылку
на несуществующий шейп. Значит нужно вычислять эту ссылку в процессе работы.
Одним из удобных моментов представляется момент опускания мастер-шейпа на страницу
рисунка. Связь с этим событием устанавливается через ячейку EventDrop секции Events.
В нашем случае в момент его наступления функция SETF запишет в ячейку Scratch.C1
имя шейпа рамки "Рамка чертежа". Потом это имя скомпонуется со ссылками на PinX и
PinY и поступит в соответствующие ячейки секции Shape Transform.</p>
<p align="Justify">Такая связка срабатывает, но к сожалению, только один раз.
При изменении размеров страницы рисунка рамка уползает вместе со страницей, а штамп
остается на месте. Однако, если такую же формулу записать и в качестве реакции на
второе событие - двойной щелчок мыши (ячейка EventDblClick), то положение штампа
всегда можно будет легко откорректировать.</p>
<p align="Justify">Записываем оба объекта в трафарет Stencil2.vss, рабочий пример
- в файл Source2.vsd. Все это можно взять в архиве <a href="Source2.zip">Source2.zip</a>.</p>
<p align="Justify">Отмечу, что рисунок сделан только в целях демонстрации и не
следует использовать его для оформления настоящих чертежей.</p>

<!-- --------------------------- -->
</td></tr></table>
<table border="0" cellPadding="0" cellSpacing="0" width="100%">
<TBODY><tr width="100%"><td bgColor="#000000" width="100%"><img height="2"
src="spacer.gif" width="100"></td></tr></TBODY>
</table>
<img alt height="2" src="spacer.gif" width="1"><BR>
<!-- --------------------------- -->
<b>Контакты:</b> Туманов Геннадий Евгеньевич&nbsp;&nbsp;&nbsp;<a href="mailto:gCroc@yandex.ru">gCroc@yandex.ru</a>
<br/>

</body>
</html>
