<html>
<head>
<title>Программирование в Visio</title>
<meta name="GENERATOR" content="MSHTML 5.00.2614.3500">
<meta content="text/html; charset=windows-1251" http-equiv="Content-Type">
<LINK REL="STYLESHEET" HREF="vis.css">
</head>
<body bgcolor="white">
<table width="100%"><tr>
<td width="20%" align="center"><a href="../index.htm"><IMG SRC="../images/vl1.png" WIDTH="230" HEIGHT="130" BORDER="0" ALT=""></a>&nbsp;</td>
<td width="10%" align="center">&nbsp;</td>
<td class='menutd' width="70%" align="center">
 <a class="menu" href="http://visio.getbb.ru/">Форум visio.getbb.ru</a> |
 <a class="menu" href="../reg.htm">О форумах</a>
<!-- 
 <a class="menu" href="../forum/default.asp">форум visio.artberg.ru</a> |
 <a class="menu" href="../f_rubr/top.htm">Указатель artberg</a>
--> 
<br/>
 <a class="menu" href="../bib.htm">Библиотека</a> |
 <a class="menu" href="../faq.htm">Частые вопросы</a> |
 <a class="menu" href="../bookpdf.htm">Литература</a> |
 <a class="menu" href="../loading.htm">Склад материалов</a>
<br/>
 <a class="menu" href="http://visio-all.blogspot.ru/p/blog-page.html">Полезные ссылки</a> |
 <a class="menu" href="../site.htm">О сайте</a>
<br/>
 <a class="menu" href="../visiocorp.htm">История Visio</a> |
 <a class="menu" href="../product.htm">Продукты Visio</a>
</td></tr></table>
<table width="100%" cellpadding="0" cellspacing="0" class="min"><tr><td width="10%" align="center">&nbsp;</td>
	<td width="90%">&nbsp;&nbsp;Для русскоязычных пользователей Visio. Начинающих и профессионалов.
Где взять, как сделать, что купить и т.д.
</td></tr></table>
<!-- --------------------------- -->
<img alt height="2" src="spacer.gif" width="1"><BR>
<!-- Внутренняя табл. для чужого текста -->
<table border="0" cellpadding="20" cellspacing="0" width="100%">
<tr><td width="100%" bgcolor="FFFFFF">
<!-- --------------------------- -->

<h1>Программирование в Visio</h1>
<p align="right">Туманов Г.Е.</p>
<p align="right"><i>Из серии статей о Visio и автоматизации</i></p>

<p align="Justify">Давайте на нескольких простых примерах разберемся с технологией
программирования в Visio.</p>
<p align="Justify">В качестве языка программирования используется встроенный Visual
Basic for Applications (VBA) - широко распространенный и достаточно простой язык.
Поэтому основной целью будем считать не тонкости языка, а основы его применения
именно в Visio.</p>
<p align="Justify">Программы опираются на объектную модель Visio.</p>
<p align="Justify">Все, что мы видим в Visio, является набором взаимосвязанных
объектов. Любое программное воздействие - это  либо добавление и удаление объекта,
либо изменение каких-то свойств имеющихся объектов. При этом обычно решаются две
задачи:</p>
<ul>
<li>найти нужный объект, т.е. определить ссылку на него;</li>
<li>изменить свойство объекта.</li>
</ul>
<p align="Justify">Путь связи объектов в приложении и связи объектов с их свойствами,
методами и событиями, то есть иерархию объектов, называют объектной моделью.
Она отражает все типы объектов, доступных в Visio.</p>
<p align="Justify">Нужно отметить, что в программах могут дополнительно применяться
и другие объекты, например объекты ActiveX. Это дает возможность использовать
стандартные диалоги Windows, кнопки, формы, выпадающие списки и т.д. Такие объекты
не входят в объектную модель Visio, но подключаются к ней как элементы коллекций
OLE-объектов или шейпов OLEObjects или Shapes. Ниже мы уточним этот способ доступа.
<h3>С чего начинать программирование</h3>
<p align="Justify">Программирование в Visio - это просто. Пожалуй, самым трудным
моментом для начинающих является создание и запуск своей первой программы, а дальше
только совершенствуй технику и отрабатывай тонкости.</p>
<p align="Justify">VBA встроен непосредственно в Visio, поэтому можно писать программы,
не запуская никаких других приложений.</p>
<p align="Justify">Один из вариантов начала программирования - запуск редактора
VBA. Нажмите Tools/Macros/Visual Basic Editor  и увидите окно редактора.</p>
<img src="ris04002.gif" height="231" width="571" alt="" border="0"../>
<p align="Justify">По умолчанию оно запускается в виде, разбитом на две части:
слева окно проекта (Project Explorer), в котором просматривается структура вашего
проекта, справа окно для написания кода программы. При необходимости можно раскрыть
еще и окно Object Browser, в котором просматриваются свойства и методы любого из
используемых в проекте объектов.</p>
<p align="Justify">Напишем в правом окне три строчки:</p>
<table border="0" bgcolor="#EEEEFF">
<tr><td>Sub Hello()</td></tr>
<tr><td>  MsgBox "Первый макрос"../td></tr>
<tr><td>End Sub</td></tr>
</table>
<p align="Justify">Это первый макрос с именем "Hello", который должен просто нарисовать
информационное окошко с надписью "Первый макрос". Переходим в окно рисунка Visio,
выполняем команды Tools/Macros/Macros и видим, что в списке доступных для выполнения
макросов появился только что написанный нами ThisDocument.Hello(). Выберем его и
нажмем кнопку Run внизу окна. В качестве результата выполнения макроса на экране
появляется информационное окошко.</p>
<table border="0" width="92%">
<tr><td Width="20%" align="center">
<img src="ris04003.gif" height="126" width="136" alt="" border="0"../></td>
<td><p align="Justify">Второй вариант создания макроса - в окне рисунка Visio
выполняем команды Tools/Macros/Macros. Пишем имя макроса, например Hello2 и нажимаем
кнопку Create (создать).</p>
<p align="Justify">Во-первых, при этом мы переходим в окно редактора VBA, во-вторых,
видим, что оно изменилось. В окне проекта появляется папка Modules, в ней выбранный
компонент Module1, а в правом окне вместо созданного ранее макроса появилась заготовка
для нового с именем Hello2. Впишем между двумя строчками заготовки свою строку:
MsgBox "Второй макрос"../p>
</td></tr></table>
<p align="Justify">Перейдем в окно рисунка и посмотрим каким стал состав доступных
макросов. После выполнения команд Tools/Macros/Macros мы наблюдаем, что в списке
появилось еще и имя Macros.Module1.Hello2. Это составное имя включает имя документа
(или проекта) Macros, имя программного модуля Module1 и собственно имя макроса
Hello2. Программный модуль может содержать множество макросов, а в проект можно
включить множество модулей. Включение нового модуля выполняется командой Insert/Module
в окне редактора VBA. Естественно, модули можно и удалять.</p>
<p align="Justify">И, наконец, еще один вариант - выполним в окне редактора VBA
команду Insert/UserForm. При этом появляется панель, на которой можно располагать
кнопки, и инструменты для работы. В окне проекта можно увидеть новую коллекцию
Forms с формой UserForm1. Щелкнув по левой кнопке в окне проекта с всплывающей
подсказкой View Code, увидим еще одну заготовку макроса с именем Sub UserForm_Click().</p>
<p align="Justify">Если два наших первых макроса были так сказать "отвлеченными",
то этот будет вызываться в качестве реакции на событие - щелчок мышью по пользовательской
форме. Полный список событий для объекта UserForm виден в выпадающем списке в правой
части окна редактора "Procedure". Когда появится несколько объектов, то для каждого
из них будет свой список событий.</p>
<p align="Justify">Таким образом макросы могут быть введены как принадлежность
документа, оформлены в отдельный модуль, который можно экспортировать или импортировать
как программу VBA или являться реакцией на событие, связанное с определенным объектом.
Запускаться макросы могут как вручную оператором, так и по определенному событию.</p>
<p align="Justify">Теперь посмотрим, как программа взаимодействует с объектами.</p>
<h3>Объектная модель</h3>
<p align="Justify">В наши задачи не входит описание полной объектной модели Visio,
возьмем только часть, касающуюся шейпов.</p>
<img src="ris04001.gif" height="340" width="629" alt="" border="0"../>
<p align="Justify">Как видим, проект Visio включает одно приложение (Application),
а следующие уровни иерархии оформляются в коллекции. То есть приложение содержит
коллекцию документов (Documents), ее элементом является документ (Document).
Документ содержит коллекцию страниц (Pages), состоящую из нескольких страниц.
Элементом страницы является коллекция Shapes из шейпов (Shape).</p>
<p align="Justify">Так как шейп может являться группой, то он в свою очередь может
содержать коллекцию шейпов.</p>
<p align="Justify">Доступ ко многим свойствам шейпов предоставляется через шейп-лист
(ShapeSheet). В объектной модели для этого служат уровни секция шейп-листа (Seсtion),
строка секции (Row) и ячейка (Cell).</p>
<p align="Justify">На том же уровне, что и лист рисунка, выступает трафарет.
Документ может содержать коллекцию трафаретов (Masters) из отдельных трафаретов
(Master). На каждом трафарете размещается коллекция шейпов (в данном случае это
будут мастер-шейпы).</p>
<p align="Justify">Вот и все основные объекты для управления шейпами.</p>
<p align="Justify">Программа может добавлять элемент в коллекцию, удалять его или
менять какие-то свойства объектов.</p>
<p align="Justify">Доступ к объектам чаще всего производится либо по индексу
соответствующей коллекции, либо по имени, либо по идентификатору. Немного проще
получается ссылка на объект при его добавлении в коллекцию, она формируется в момент
создания экземпляра шейпа. Рассмотрим, что делается в следующем фрагменте программы:</p>
<table border="0" bgcolor="#EEEEFF">
<tr><td>Set stnObj = Documents("Basic Network Shapes 3D.vss")</td></tr>
<tr><td>Set mastObj = stnObj.Masters("Server")</td></tr>
<tr><td>Set shpObj1 = ActivePage.Drop(mastObj, 2, 10)</td></tr>
<tr><td>shpObj1.Text = "Первый сервер"../td></tr>
</table>
<p align="Justify">Сначала определяется ссылка на трафарет, то есть оператор Set
stnObj находит в коллекции документов открытого приложения объект - трафарет "Basic
Network Shapes 3D.vss" и записывает указатель на него в переменную stnObj, через
которую в дальнейшем можно будет ссылаться на этот объект.</p>
<p align="Justify">Следующей строкой переменной mastObj присваивается ссылка на
мастер-шейп с именем "Server" из коллекции шейпов этого трафарета.</p>
<p align="Justify">Затем метод Drop объекта Page (в данном случае для указания
на активную страницу используется специальный объект ActivePage) добавляет к
коллекции Shapes этой страницы экземпляр выбранного мастер-шейпа. Ссылкой на него
будет shpObj1.</p>
<p align="Justify">И, наконец, строка shpObj1.Text = "Первый сервер" изменяет
свойство Text этого шейпа.</p>
<p align="Justify">В результате выполнения этой программы на странице рисунка
появится шейп Server, в текстовом поле которого будет написано "Первый сервер".</p>
<h3>Способы идентификации шейпа.</h3>
<p align="Justify">Теперь рассмотрим способы идентификации шейпа. Следующая программа
должна перебрать все шейпы активной страницы и для каждого из них распечатать имя и
идентификатор ID. Так как результаты работы программы поясняют дальнейшие объяснения,
рекомендуется выполнить этот пример практически.</p>
<p align="Justify">Запускаем Visio, открываем новый документ на основе шаблона
Basic Diagram, рисуем на чистом листе единственный прямоугольник (для вывода результатов).
Запускаем VBA редактор, щелкаем по кнопочке View Code и на появившемся листе
пишем следующую программу.</p>
<table border="0" bgcolor="#EEEEFF">
<tr><td>Sub Example1()</td></tr>
<tr><td>s1 = ""../td></tr>
<tr><td>  For i = 1 To ActivePage.Shapes.Count</td></tr>
<tr><td>	s1 = s1 + "Name= " + ActivePage.Shapes(i).Name</td></tr>
<tr><td>	s1 = s1 + "   Id= " + Str(ActivePage.Shapes(i).ID) + vbCrLf</td></tr>
<tr><td>  Next</td></tr>
<tr><td>ActivePage.Shapes(1).Text = s1</td></tr>
<tr><td>End Sub</td></tr>
</table>
<p align="Justify">Пусть наша программа запускается при двойном щелчке по нарисованному
прямоугольнику. Для этого выделяем его и выполняем команду
Format/Behavior/Double-Click/RunMacro/ThisDocument.Example1.</p>
<p align="Justify">Переходим на лист рисунка и дважды щелкаем по прямоугольнику.</p>
<p align="Justify">В нем появляется надпись Name= Sheet.1   Id=  1.</p>
<p align="Justify">То есть программа опросила всю коллекцию шейпов на единственном
листе рисунка, нашла там только один шейп и вывела в прямоугольник в качестве надписи
его имя (Sheet.1) и идентификатор 1.</p>
<p align="Justify">Для того, чтобы  пояснить принцип формирования имен и
идентификаторов, последовательно перетаскиваем с трафарета на лист рисунка два
треугольника и квадрат, а затем рисуем одну линию. Дважды щелкаем по нашему первому
прямоугольнику и смотрим, как образованы имена шейпов.</p>
<img src="ris04004.gif" height="190" width="462" alt="" border="0"../>
<p align="Justify">Первый шейп получил имя Sheet.1, то есть когда шейп не является
экземпляром мастер-шейпа, а просто нарисован, то его имя образуется из слова Sheet
и порядкового номера шейпа на листе.</p>
<p align="Justify">Второй шейп получил имя мастер-шейпа без всякой добавки.</p>
<p align="Justify">Третий шейп называется Triangle.3, то есть дополнительные копии
получают имя мастер-шейпа плюс порядковый номер шейпа на листе.</p>
<p align="Justify">Четвертый и пятый именуются по уже указанным правилам.</p>
<p align="Justify">Удаляем первый треугольник и опять дважды щелкаем по квадрату.
Как видим, одна строчка исчезла, а остальные имена остались без изменений. Если
теперь добавить еще шейп, то он получит пропущенный идентификатор (заполняются дырки).</p>
<p align="Justify">После этих экспериментов можно перечислить способы обращения к шейпу:</p>
<table border="0">
  <tr><td width=40%>по индексу в коллекции</td><td width=40%>ActivePage.Shapes(i).Name</td></tr>
  <tr><td>по имени</td><td>Set shpObj = shpsObj.Item("Desktop PC")</td></tr>
  <tr><td>по имени с идентификатором</td><td>Set shpObj = shpsObj.Item("Sheet.5")</td></tr>
</table>
<p align="Justify">(можно еще работать с уникальным идентификатором, но этот момент
пока опустим).</p>
<h3>Каталог трафарета.</h3>
<p align="Justify">Теперь рассмотрим, как получить каталог трафарета.</p>
<p align="Justify">В общем-то это делается почти так же, как и со страницей рисунка,
только вместо ActivePage мы обязаны прямо выбрать трафарет из коллекции документов
и вместо коллекции шейпов Shapes будем использовать коллекцию мастер-шейпов Masters.
Вот пример, формирующий список мастер-шейпов в трафарете Basic Shapes.vss.</p>
<table border="0" bgcolor="#EEEEFF">
<tr><td>Sub Example2()</td></tr>
<tr><td>Set stnObj = Documents("Basic Shapes.vss")</td></tr>
<tr><td>s1 = ""../td></tr>
<tr><td>  For i = 1 To stnObj.Masters.Count</td></tr>
<tr><td>	s1 = s1 + "Name= " + stnObj.Masters(i).Name</td></tr>
<tr><td>	s1 = s1 + "   Id= " + Str(stnObj.Masters(i).ID) + vbCrLf</td></tr>
<tr><td>  Next</td></tr>
<tr><td>ActivePage.Shapes(1).Text = s1</td></tr>
<tr><td>End Sub</td></tr>
</table>
<h3>Шаблон для документирования</h3>
<p align="Justify">Разобранные здесь примеры сведены в один шаблон
<a href="Macros1.zip">Macros1.zip</a>,
а чтобы он не был уж слишком простым, туда добавлена еще формочка и несколько кнопок.
С помощью такого шаблона легко посмотреть имена сразу всех имеющихся на рисунке
шейпов или состав любого трафарета.</p>
<p align="Justify">Формочка вызывается командой Tools/Macros/Macros…/ThisDocument.Example3/Run.
Кнопка Новый обновляет список имеющихся в документе трафаретов, один из которых можно
потом выбрать из выпадающего списка. Кнопка Трафарет выводит имена мастер-шейпов в
окно. Кнопка Документ выводит туда же имена шейпов с листа рисунка. Кнопка Copy
сохраняет список в буфере Windows, откуда он может быть вставлен в нужный редактор.</p>

<!-- --------------------------- -->
</td></tr></table>
<table border="0" cellPadding="0" cellSpacing="0" width="100%">
<TBODY><tr width="100%"><td bgColor="#000000" width="100%"><img height="2"
src="spacer.gif" width="100"></td></tr></TBODY>
</table>
<img alt height="2" src="spacer.gif" width="1"><BR>
<!-- --------------------------- -->
<b>Контакты:</b> Туманов Геннадий Евгеньевич&nbsp;&nbsp;&nbsp;<a href="mailto:gCroc@yandex.ru">gCroc@yandex.ru</a>
<br/>

</body>
</html>
