<html>
<head>
<title>Внешняя программа для Visio</title>
<meta name="GENERATOR" content="MSHTML 5.00.2614.3500">
<meta content="text/html; charset=windows-1251" http-equiv="Content-Type">
<LINK REL="STYLESHEET" HREF="vis.css">
</head>
<body bgcolor="white">
<table width="100%"><tr>
<td width="20%" align="center"><a href="../index.htm"><IMG SRC="../images/vl1.png" WIDTH="230" HEIGHT="130" BORDER="0" ALT=""></a>&nbsp;</td>
<td width="10%" align="center">&nbsp;</td>
<td class='menutd' width="70%" align="center">
 <a class="menu" href="http://visio.getbb.ru/">Форум visio.getbb.ru</a> |
 <a class="menu" href="../reg.htm">О форумах</a>
<!-- 
 <a class="menu" href="../forum/default.asp">форум visio.artberg.ru</a> |
 <a class="menu" href="../f_rubr/top.htm">Указатель artberg</a>
--> 
<br/>
 <a class="menu" href="../bib.htm">Библиотека</a> |
 <a class="menu" href="../faq.htm">Частые вопросы</a> |
 <a class="menu" href="../bookpdf.htm">Литература</a> |
 <a class="menu" href="../loading.htm">Склад материалов</a>
<br/>
 <a class="menu" href="http://visio-all.blogspot.ru/p/blog-page.html">Полезные ссылки</a> |
 <a class="menu" href="../site.htm">О сайте</a>
<br/>
 <a class="menu" href="../visicorp.htm">История Visio</a> |
 <a class="menu" href="../product.htm">Продукты Visio</a>
</td></tr></table>
<table width="100%" cellpadding="0" cellspacing="0" class="min"><tr><td width="10%" align="center">&nbsp;</td>
	<td width="90%">&nbsp;&nbsp;Для русскоязычных пользователей Visio. Начинающих и профессионалов.
Где взять, как сделать, что купить и т.д.
</td></tr></table>
<!-- --------------------------- -->
<img alt height="2" src="spacer.gif" width="1"><BR>
<!-- Внутренняя табл. для чужого текста -->
<table border="0" cellpadding="20" cellspacing="0" width="100%">
<tr><td width="100%" bgcolor="FFFFFF">
<!-- --------------------------- -->

<h1>Внешняя программа для Visio</h1>
<p align="right">Туманов Г.Е.</p>
<p align="right"><i>Из серии статей о Visio и автоматизации</i></p>

<p align="Justify">Рассмотрим, как строится программа, запускаемая вне среды Visio.</p>
<p align="Justify">Предположим, нужно решить следующую задачу. В Excel имеется
табличка, содержащая данные о структуре небольшой сети. Требуется графически отобразить
эту структуру в виде html документа.</p>
<p align="Justify">Табличка будет, например, такой</p>
<table border="1">
<tr><td>ind</td><td>tip</td><td>conn</td><td>func</td><td>comm</td><td>ip</td><td>ipx</td></tr>
<tr><td>1</td><td>"Hub"../td><td>0</td><td>R401</td><td>"Hub16"../td><td>&nbsp</td><td>&nbsp</td></tr>
<tr><td>2</td><td>"Server"../td><td>1</td><td>Main</td><td>"Celeron/512/40"../td>
	<td>"172.18.21.1"../td><td>"main"../td></tr>
<tr><td>3</td><td>"Workstation"../td><td>1</td><td>R401-1</td><td>"Celeron/128/20"../td>
	<td>"172.18.21.2"../td><td>"mont-1"../td></tr>
<tr><td>4</td><td>"Workstation"../td><td>1</td><td>R401-2</td><td>"Celeron/128/20"../td>
	<td>"172.18.21.3"../td><td>"mont-2"../td></tr>
<tr><td>5</td><td>"Workstation"../td><td>1</td><td>R401-3</td><td>"P133/64/20"../td>
	<td>"172.18.21.100"../td><td>"boss"../td></tr>
<tr><td>6</td><td>"Laser Printer"../td><td>4</td><td>Hewlett Packard</td><td>"LJ5P"../td>
	<td>&nbsp</td><td>&nbsp</td></tr>
<tr><td>7</td><td>"Scanner"../td><td>4</td><td>Mustek</td><td>"ScanExpress 600 SEP"../td>
	<td>&nbsp</td><td>&nbsp</td></tr>
</table>
<p align="Justify">В столбце tip указаны несколько типов сетевых устройств. Каждое
устройство должно отображаться своей картинкой. Столбец conn показывает, к какому
устройству присоединено данное устройство. То есть сервер и все рабочие станции
подключены к концентратору, принтер и сканер связаны с одной из рабочих станций.
Эти данные дадут нам конфигурацию сети.</p>
<p align="Justify">Столбец func несет некоторую информацию о функциональном назначении
устройств. Пусть эта информация отображается в виде подписей к рисункам.</p>
<p align="Justify">Данные из остальных столбцов хорошо бы разместить в полускрытом
виде, так чтобы они не загромождали рисунок, но были всегда доступны для просмотра.</p>
<p align="Justify">Таким образом, на входе имеется документ в формате Excel, на
выходе будет html документ, в качестве промежуточного используем рисунок Visio.
Ну и где-то должно быть еще приложение - программа, которая произведет все необходимые
преобразования. В соответствии с темой данной статьи программа должна быть не в Visio,
значит либо отдельное приложение, либо, для простоты, приложение на основе Excel.
Вот последний вариант и выберем.</p>
<h3>VBA проект в Excel</h3>
<p align="Justify">Встроенным языком программирования в Excel является также VBA.
Значит и отличия от программы в Visio будут минимальны. Нужно только суметь создать
экземпляр Visio (в начале работы его нет) и наладить взаимодействие с его объектами.</p>
<p align="Justify">На создании VBA проекта в Excel задерживаться долго не будем.
Открываем Excel, набираем в нем приведенную выше таблицу, через меню Сервис/Макрос
запускаем редактор VBA и создаем модуль для нашей программы.</p>
<p align="Justify">Важным моментом является подключение к проекту библиотеки типов
для описания объектов Visio. Для этого в редакторе нужно воспользоваться меню
Tools/References. В открывшемся диалоговом окне выбираем соответствующую библиотеку,
отмечаем ее галочкой и жмем OK.</p>
<img src="ris05001.gif" height="243" width="374" alt="" border="0"../>
<p align="Justify">В данном случае подключена библиотека Microsoft Visio 2002
Type Library. Если этого не сделать, то в среде Excel VBA будет выдавать ошибки
при упоминании объектов Visio, так как по умолчанию он их не знает.</p>
<p align="Justify">Вводим в наш модуль текст программы, приведенный в
<a href="list5_1.txt" target="new">листинге 1</a>.</p>
<p align="Justify">Сохраняем документ. Теперь можно выбирать в меню Сервис/Макрос/Макросы
появившийся там макрос NetVis и командовать Выполнить.</p>
<p align="Justify">Если все сделано правильно, то откроется окно с документом
Visio, в нем нарисуются несколько шейпов, соединятся между собой коннекторами,
окно закроется, а в каталоге C:\Мои документы появится файл NetV.htm и папка
NetV_files, с дополнительными файлами. При запуске файла NetV.htm можно наблюдать
результаты работы, похожие <a href=".\netv.htm" target="new">вот на это</a>. При наведении маркера мыши на любое сетевое
устройство в отдельном фрейме выводятся его свойства. Естественно, их увидят не все,
так как пока мы работали только продуктами Microsoft, значит и результат, как водится,
ориентирован только на  IE. Но это уже другой вопрос, а имея соответствующий исходный
материал в папке NetV_files, веб-дизайнер всегда может опубликовать его в нормальном виде.</p>
<h3>Разбор листинга.</h3>
<p align="Justify">Теперь посмотрим подробнее, как все происходит.</p>
<p align="Justify">Первая часть программы не касается Visio, а только переносит
данные из таблицы Excel в массивы VBA. При этом определяется размер заполненной
области и устанавливаются соответствующие размерности массивов.</p>
<p align="Justify">Затем следует объявление переменных, используемых для доступа
к объектам Visio.</p>
<p align="Justify">Собственно работа с Visio начинается с создания экземпляра Visio</p>
<table border="0" bgcolor="#EEEEFF">
<tr><td>Set appVisio = CreateObject("visio.application")</td></tr>
</table>
<p align="Justify">Когда приложение строилось в среде Visio, этого не требовалось,
потому что при запуске программы оно было уже открыто. В данном случае создание
экземпляра Visio является обязательным элементом.</p>
<p align="Justify">Возможны некоторые модификации. Если предполагается, что Visio
на момент запуска программы уже должен быть открыт, то можно получить ссылку на
открытый экземпляр и работать с ним. Это выполняется командой GetObject</p>
<table border="0" bgcolor="#EEEEFF">
<tr><td>Set appVisio = GetObject(, "Visio.Application")</td></tr>
</table>
<p align="Justify">Иногда требуется открыть невидимый экземпляр Visio.
Для этого используется специальная модификация команды.</p>
<table border="0" bgcolor="#EEEEFF">
<tr><td>Set appVisio = CreateObject("Visio.InvisibleApp")</td></tr>
</table>
<p align="Justify">Visio будет существовать до тех пор, пока не будет вызван метод Quit.</p>
<table border="0" bgcolor="#EEEEFF">
<tr><td>appVisio.Quit</td></tr>
</table>
<p align="Justify">Ну а как только появился доступ к приложению Visio, доступ к
остальным объектам не составляет труда. Наша программа создает новый документ на
основе шаблона Basic Network.vst, открывает его первую страницу и выбирает для
работы один из встроенных в шаблон трафаретов Basic Network Shapes.vss.</p>
<p align="Justify">Далее нужно собственно отобразить на рисунке заданную сеть.
Для этого каждому типу устройства ставится в соответствие свой мастер-шейп в трафарете.
В принципе можно было бы нарисовать свои оригинальные мастер-шейпы или воспользоваться
богатейшей коллекцией шейпов сетевых устройств, но нас сейчас интересует не столько
богатство типов, сколько принципы отображения, поэтому просто выбраны похожие шейпы
с одного из базовых трафаретов. Единственное условие - можно использовать только
мастер-шейпы, имеющиеся в трафарете. Основные операции следующие:</p>
<table border="0">
<tr><td  bgcolor="#EEEEFF">Set mastObj = docObj.Masters("Server")</td>
	<td>из коллекции мастер-шейпов выбирается шейп с именем "Server"../td></tr>
<tr><td  bgcolor="#EEEEFF">Set SetComp = pagObj.Drop(mastObj, x, y)</td>
	<td>переносится на страницу в точку с нужными координатами</td></tr>
<tr><td  bgcolor="#EEEEFF">SetComp.Text = name</td>
	<td>заполняется текстовый блок шейпа (подпись)</td></tr>
</table>
<p align="Justify">Принцип размещения тоже несложен - линейка концентраторов,
линейка компьютеров и линейка периферии. Каждый следующий шейп помещается на
полтора дюйма правее.</p>
<p align="Justify">Одновременно с прорисовкой шейпов набирается массив шейпов
elements() для удобства последующего их соединения.</p>
<p align="Justify">Все имеющиеся в трафарете мастер-шейпы имеют пользовательские
свойства. Изображения шейпов нам подходят, а вот свойства хотелось бы иметь другие,
чтобы отобразить имеющиеся в таблице Excel сведения о сетевых устройствах. Каждое
свойство состоит из метки и значения. Доступ к ним осуществляется через ячейки
шейп-листа. Команда</p>
<table border="0" bgcolor="#EEEEFF">
<tr><td>Set cell1 = Shp.CellsSRC(visSectionProp, visRowProp + 0, visCustPropsLabel)</td></tr>
</table>
<p align="Justify">дает нам ссылку на метку первого пользовательского свойства
шейпа Shp. А следующая команда заносит в эту ячейку значение метки (строковая
переменная заключается в тройные кавычки).</p>
<table border="0" bgcolor="#EEEEFF">
<tr><td>cell1.Formula = """Тип"""../td></tr>
</table>
<p align="Justify">Изменение значения свойства производится примерно так же, только
используется другая константа - visCustPropsValue.</p>
<table border="0" bgcolor="#EEEEFF">
<tr><td>Set cel1 = elements(i).CellsSRC(visSectionProp, visRowProp + 0, visCustPropsValue)</td></tr>
<tr><td>cel1.Formula = tip(i)</td></tr>
</table>
<p align="Justify">Остальные свойства (кроме первых четырех) для простоты не трогаем.</p>
<p align="Justify">Для соединения шейпов перебираем созданный на предыдущем шаге
массив шейпов и каждый шейп соединяем мастер-шейпом "Dynamic connector" с другим,
номер которого находится в массиве conn. Процесс состоит из следующих шагов:</p>
<table border="0">
<tr><td>Выбираем коннектор</td></tr>
<tr><td bgcolor="#EEEEFF">Set mastObj = stnObj.Masters("Dynamic connector")</td></tr>
<tr><td>Опускаем его на страницу в некоторую точку</td></tr>
<tr><td bgcolor="#EEEEFF">Set shpConnector = pagObj.Drop(mastObj, 4.25, 9)</td></tr>
<tr><td>Размещаем последним, чтобы он не перекрывал изображение устройств</td></tr>
<tr><td bgcolor="#EEEEFF">shpConnector.SendToBack</td></tr>
<tr><td>Задаем цвет</td></tr>
<tr><td bgcolor="#EEEEFF">shpConnector.Cells("LineColor") = 0</td></tr>
<tr><td>И толщину в дюймах</td></tr>
<tr><td bgcolor="#EEEEFF">shpConnector.Cells("LineWeight") = 0.02</td></tr>
<tr><td>Получаем ссылку на ячейку шейп-листа, с значением начала коннектора</td></tr>
<tr><td bgcolor="#EEEEFF">Set celBeginX = shpConnector.CellsSRC(visSectionObject,
  visRowXForm1D, vis1DBeginX)</td></tr>
<tr><td>Приклеиваем его к текущему шейпу</td></tr>
<tr><td bgcolor="#EEEEFF">celBeginX.GlueTo elements(i).CellsSRC(visSectionObject,
  visRowXFormOut, visXFormPinX)</td></tr>
<tr><td>Получаем ссылку на ячейку шейп-листа с значением конца коннектора</td></tr>
<tr><td bgcolor="#EEEEFF">Set celEndX = shpConnector.CellsSRC(visSectionObject,
  visRowXForm1D, vis1DEndX)</td></tr>
<tr><td>Приклеиваем его шейпу, индекс которого установлен в массиве conn</td></tr>
<tr><td bgcolor="#EEEEFF">celEndX.GlueTo elements(conn(i) - 1).CellsSRC(visSectionObject,
  visRowXFormOut, visXFormPinX)</td></tr>
</table>
<p align="Justify">Теперь рисунок готов, остается только сохранить его в нужном виде.</p>
<p align="Justify">Сохранение рисунка в формате Visio производится методом SaveAs</p>
<table bgcolor="#EEEEFF">
<tr><td>docObj.SaveAs "С:\Мои документы\NetV.vsd"../td></tr>
</table>
<p align="Justify">Для сохранения в html виде такая команда не подходит. Нужно
использовать метод Export соответствующего объекта. Можно экспортировать одиночный
шейп или всю страницу рисунка. В нашем случае больше подходит последнее, поэтому
экспортируется объект pagObj.</p>
<table bgcolor="#EEEEFF">
<tr><td>pagObj.Export " С:\Мои документы\NetV.htm"../td></tr>
</table>
<p align="Justify">Тип преобразования определяется расширением файла (в данном
случае htm). Существует еще одна тонкость - как видим, команда практически не
содержит настроек. В случае программного экспорта Visio использует те настройки,
которые были заданы при последнем ручном экспорте соответствующего типа. То есть
если вы получили не то, что хотели, откройте Visio вручную (произвольный рисунок)
и выполните преобразование такого же типа с нужными параметрами. Затем закрывайте
Visio и вновь запускайте вашу программу. Теперь преобразование пойдет по сохранившимся
настройкам.</p>
<p align="Justify">В процессе сохранения в html формате Visio создает головной
документ с заданным именем и дополнительную папку с множеством файлов. Здесь и
странички для отображения в фреймах, и рисунки gif или png, и css, и скрипт, и
система навигации на случай использования многостраничных документов, и структура
документа в виде xml. Для каждого конкретного случая явный избыток, но выкинуть
лишнее - не проблема.</p>
<p align="Justify">Подобный подход можно использовать как при непосредственном
размещении приложения на сервере (тогда обновление изображения, доступного через
веб-интерфейс, будет производиться одним нажатием кнопки), так и при удаленном
размещении (с использованием какого-либо механизма публикации).</p>
<p align="Justify">Все исходные материалы и результаты работы обсуждаемого примера
можно взять для подробного рассмотрения в <a href="source5.zip">zip-архиве</a>.</p>

<!-- --------------------------- -->
</td></tr></table>
<table border="0" cellPadding="0" cellSpacing="0" width="100%">
<TBODY><tr width="100%"><td bgColor="#000000" width="100%"><img height="2"
src="spacer.gif" width="100"></td></tr></TBODY>
</table>
<img alt height="2" src="spacer.gif" width="1"><BR>
<!-- --------------------------- -->
<b>Контакты:</b> Туманов Геннадий Евгеньевич&nbsp;&nbsp;&nbsp;<a href="mailto:gCroc@yandex.ru">gCroc@yandex.ru</a>
<br/>

</body>
</html>

