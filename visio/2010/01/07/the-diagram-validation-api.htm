<!DOCTYPE html>
<html lang="en-US">
<head>
              <meta charset="UTF-8">
	<meta name="viewport" content="width=device-width">
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="stylesheet" href="https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.5/css/bootstrap.min.css">
<title>The Diagram Validation API &#8211; Archive of Visio Insights blog (2006-2018)</title>
<link rel='dns-prefetch' href='//ajax.aspnetcdn.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel='stylesheet' id='wds-ratings-css'  href='https://blogs.msdn.microsoft.com/wp-content/plugins/wds-ratings/wds-ratings.css?ver=20161014' type='text/css' media='all' />
<link rel='stylesheet' id='microsoft-parent-style-css'  href='https://blogs.msdn.microsoft.com/wp-content/themes/microsoft/style.css?ver=02092017' type='text/css' media='all' />
<link rel='stylesheet' id='microsoft-child-style-css'  href='https://blogs.msdn.microsoft.com/wp-content/themes/microsoft-msdn/style.css?ver=04152016' type='text/css' media='all' />
	<div id='msccBanner' dir='ltr' data-site-name='uhf-TechNetBlogs' data-mscc-version='0.4.0' data-nver='aspnet-2.0.7' data-sver='0.1.2' class='cc-banner' role='alert'>
<link rel=""shortcut icon"" href=""https://i1.social.s-msft.com/Forums/GlobalResources/images/Technet/favicon.ico"">

<link rel='canonical' href='https://blogs.msdn.microsoft.com/visio/2010/01/07/the-diagram-validation-api/' />
<!-- og:title -->
<meta property="og:title" content="The Diagram Validation API" />
<!-- og:description -->
<meta property="og:description" content="Diagram Validation is a new Visio 2010 feature that provides a way for users to check their diagrams for common errors and for companies to ensure that employees are following certain diagramming standards. The basics of diagram validation and creating custom validation rules have been previously discussed on this blog. In this post, we focus..." />
</head>
<body class="post-template-default single single-post postid-503 single-format-standard">
<div id="page" class="site container-fluid">
	<header id="site-header" class="site-header row" role="banner">
		<div id="site-header-global-wrapper" class="site-header-global-wrapper">
			<div id="site-header-global" class="site-header-global">
				<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#site-profile-menu" aria-label="toggle menu" tabindex="0" aria-expanded="false">
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				</button>
				<div id="site-logo" class="col-sm-5 row navbar-header">
					<div id="header-microsoft-logo">
						<a id="home-link" href="https://www.microsoft.com/" tabindex="1" aria-label="Microsoft logo">
							<img id="header-microsoft-logo-svg" src="https://blogs.msdn.microsoft.com/visio/wp-content/themes/microsoft/images/ms-logo-gray.svg" alt="Microsoft logo">
							<span id="brand">
								<span id="brand-separator">|</span>
								<span id="brand-name"></span>
							</span>
						</a>
					</div>
				</div>
				<div id="site-header-global-right" class="col-sm-7">
				</div>
			</div>

		</div>
		<div id="site-header-blog-wrapper" class="site-header-blog-wrapper ms-blog-header clear-both">
			<div id="site-header-blog" class="site-header-blog">
				<nav class="navbar navbar-inverse">
					<div id="blog-logo-area" class="navbar-header">
						<div id="blog-logo" data-toggle="collapse" data-target="#blog-menu" tabindex="0" aria-label="blog logo">
														<div id="blog-logo-text">
<h1 class="site-title ms-blog-title">
					
						Archive of Visio Insights blog (2006-2018)
					
				</h1>
<!-- blog description -->
<p class="site-description ms-blog-description">The official blog of the Microsoft Visio product team</p>
			</div>
									</div>
					</div>
									</nav>
			</div>
			
		</div>
		<div id="site-content" class="site-content row">

	<div id="primary" class="content-area col-sm-9">
	<main id="site-main" class="site-main" role="main">
		<div id="single-content" class="div-content">
<!-- Post start -->
<article id="post-503" class="post-503 post type-post status-publish format-standard hentry category-uncategorized tag-all-posts tag-programming tag-visio-2010">
	<header class="entry-header">
<h1 class="entry-title">The Diagram Validation API</h1>
<div class="entry-meta">
<span class="byline"><span class="author vcard"><a class="url fn n profile-usercard-hover" data-profile-userid="eb78383b108c4193a0a593011dd29f8e" href="https://social.msdn.microsoft.com/profile/Visio+Team">Visio Team</a></span>
</span><span class="posted-on posted-on-margin">
			<span class="screen-reader-text"></span>
<time class="entry-date published updated" datetime="2010-01-07T16:33:00+00:00">January 7, 2010</time>
			</span>
		</div>
		<hr>
	</header><!-- .entry-header -->
<div class="entry-content single">
		<p><P>Diagram Validation is a new Visio 2010 feature that provides a way for users to check their diagrams for common errors and for companies to ensure that employees are following certain diagramming standards. The <A href="../../../../visio//2009/09/08/diagram-validation-in-visio-2010.htm" mce_href="http://blogs.msdn.com/visio/archive/2009/09/08/diagram-validation-in-visio-2010.aspx">basics of diagram validation</A> and <A href="../../../../visio//2009/09/10/creating-custom-validation-rules-for-visio-2010.htm" mce_href="http://blogs.msdn.com/visio/archive/2009/09/10/creating-custom-validation-rules-for-visio-2010.aspx">creating custom validation rules</A> have been previously discussed on this blog. In this post, we focus on the details of using the validation API to create validation rules, trigger validation, and manage validation issues.</P>
<P>Visio provides an extensive Diagram Validation API that allows companies to develop custom validation rules based on their own needs. For example, you can build rules to check that a network diagram includes mandatory components, or that a process diagram complies with company policies. The ability to verify the correctness of a diagram and raise issues to end-users is also crucial for solutions that need a certain diagram structure to work. For example, Visio uses validation for Microsoft SharePoint Workflow diagrams to ensure that SharePoint workflows are structured correctly before exporting them. As a developer, you can leverage Diagram Validation to support diagram verification for the diagram types and the issues that are important to you.</P>
<H2>Validation API overview</H2>
<P>The key objects, methods and properties for validation are shown below.</P>
<P><A href="https://msdnshared.blob.core.windows.net/media/TNBlogsFS/BlogFileStorage/blogs_msdn/visio/WindowsLiveWriter/TheDiagramValidationAPI_E77C/Validation%20API_2.jpg" original-url="http://blogs.msdn.com/blogfiles/visio/WindowsLiveWriter/TheDiagramValidationAPI_E77C/Validation%20API_2.jpg" mce_href="http://blogs.msdn.com/blogfiles/visio/WindowsLiveWriter/TheDiagramValidationAPI_E77C/Validation%20API_2.jpg"><img style="BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; DISPLAY: inline; BORDER-TOP: 0px; BORDER-RIGHT: 0px" title="Validation API" border=0 alt="Validation API" src="ValidationAPI_thumb.jpg" original-url="http://blogs.msdn.com/blogfiles/visio/WindowsLiveWriter/TheDiagramValidationAPI_E77C/Validation%20API_thumb.jpg" width=650 height=301></A> </P>
<P>The validation API is based on three main concepts: rule sets, rules and issues. A <I>validation rule</I>, or simply a<I> rule</I>, represents one type of error that can occur in your diagram. Each rule has some underlying business logic which determines when the rule has been broken. An <I>issue</I> is one case in your diagram where the validation rule has been broken. Depending on your diagram, there may be multiple issues associated with the same rule. For example, if the rule requires that all shapes be labeled, then validation will display an issue for each shape without a label. <I>Rule sets</I> are logical grouping of rules, such as the BPMN and flowchart rule sets.</P>
<H2>Key validation objects and properties</H2>
<P>Rules sets, rules and issues each have corresponding API objects, namely <B>ValidationRuleSet</B>, <B>ValidationRule</B> and <B>ValidationIssue</B>. Below we explain the key properties for each of these objects.</P>
<H3>ValidationRuleSet</H3>
<P>Every rule set has a unique <B>NameU</B> property representing the universal name of the rule set. You should also specify a <B>Description</B> for each rule set. Other properties are set by default, and only need to be modified if a different behavior is desired. The key properties of the <B>ValidationRuleSet</B> object are shown below.</P>
<P>
<TABLE border=1 cellSpacing=0 cellPadding=4 width="85%">
<TBODY>
<TR bgColor=#e0e0e0>
<TD vAlign=top width="15%"><B>Property</B> </TD>
<TD vAlign=top width="85%"><B>Description</B> </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>Description</B> </TD>
<TD vAlign=top width="85%">Specifies the description of the rule set. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>Enabled</B> </TD>
<TD vAlign=top width="85%">Determines whether the rule set is active or inactive. Only rules belonging to active rule sets are checked when validation is triggered. By default, rule sets are enabled. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>Name</B> </TD>
<TD vAlign=top width="85%">Specifies the name of the rule set that appears in the UI. By default, it is the same as <STRONG>NameU</STRONG>.</TD></TR>
<TR>
<TD vAlign=top width="15%"><B>NameU</B> </TD>
<TD vAlign=top width="85%">Specifies the universal name of the rule set. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>Rules</B> </TD>
<TD vAlign=top width="85%">Itemizes the rules in the rule set. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>RuleSetFlags</B> </TD>
<TD vAlign=top width="85%">Determines whether the rule set appears in the UI. By default, rule sets are visible through the UI. </TD></TR></TBODY></TABLE></P>
<H3>ValidationRule</H3>
<P>Every rule has a unique <B>NameU</B> property representing the universal name of the rule. You should also specify a <B>Category</B> and <B>Description</B> for each rule set, as these properties are used in the UI. The <B>Category</B> should inform the user about the type of issue, and may be used to identify the rule set that triggered the issue. The <B>Description</B> should be explicit enough to explain the issue so that a user can address it. </P>
<P>The blog post on <A href="../../../../visio//2009/09/10/creating-custom-validation-rules-for-visio-2010.htm" mce_href="http://blogs.msdn.com/visio/archive/2009/09/10/creating-custom-validation-rules-for-visio-2010.aspx">creating custom validation rules</A> describes two approaches for creating custom validation rules: you can store validation logic in a Visio template, or you can express validation logic in code and deploy this logic as part of a Visio solution. If you decide to store validation logic in a Visio template, the <B>FilterExpression</B>, <B>TestExpression</B> and <B>TargetType</B> are the fundamental properties for detecting and reporting issues during validation. If you decide to write validation logic in code, these fields should be left blank. The <B>FilterExpression</B>, <B>TargetType</B> and <B>TestExpression</B> properties are described in more detail in the section titled <A href="http://blogs.msdn.com/controlpanel/blogs/posteditor.aspx?SelectedNavItem=Posts&amp;sectionid=6406&amp;postid=9945477#DefiningValidationRule" mce_href="http://blogs.msdn.com/controlpanel/blogs/posteditor.aspx?SelectedNavItem=Posts&amp;sectionid=6406&amp;postid=9945477#DefiningValidationRule">Defining ValidationRule.FilterExpression and ValidationRule.TestExpression</A>.</P>
<P>The key properties of the <B>ValidationRule</B> object are shown below.</P>
<P>
<TABLE border=1 cellSpacing=0 cellPadding=4 width="85%">
<TBODY>
<TR bgColor=#e0e0e0>
<TD vAlign=top width="15%"><B>Property</B> </TD>
<TD vAlign=top width="85%"><B>Description</B> </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>Category</B> </TD>
<TD vAlign=top width="85%">Represents the text displayed in the <B>Category</B> column of the <B>Issues</B> window. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>Description</B> </TD>
<TD vAlign=top width="85%">Specifies the description of the rule that appears in the <B>Issues</B> window. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>FilterExpression</B> </TD>
<TD vAlign=top width="85%">Specifies the logical expression that determines whether the validation rule should be applied to a target object. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>Ignored</B> </TD>
<TD vAlign=top width="85%">Determines whether the validation rule is currently ignored. By default, rules are not ignored.</TD></TR>
<TR>
<TD vAlign=top width="15%"><B>NameU</B> </TD>
<TD vAlign=top width="85%">Specifies the universal name of the rule. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>RuleSet</B> </TD>
<TD vAlign=top width="85%">Returns the rule set that contains the rule. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>TargetType</B> </TD>
<TD vAlign=top width="85%">Determines the target type of the rule. A rule can target documents, pages, or shapes. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>TestExpression</B> </TD>
<TD vAlign=top width="85%">Specifies the logical expression that determines whether the target object satisfies the rule. </TD></TR></TBODY></TABLE></P>
<H3>ValidationIssue</H3>
<P>Every issue has an associated <B>Rule</B> which specifies the description and category that is displayed in <B>Issues</B> window. When a user clicks on an issue in the <B>Issues</B> window, Visio will navigate to the page of the issue (if the issue targets a page or shape) and will select the target shape (if the issue targets a shape).The <STRONG>TargetPage, TargetPageID </STRONG>and <B>TargetShape</B> properties are used determine the page to display and the shape to select.&nbsp;&nbsp;&nbsp; The key properties of the <B>ValidationIssue</B> object are shown below. </P>
<P>
<TABLE border=1 cellSpacing=0 cellPadding=4 width="85%">
<TBODY>
<TR bgColor=#e0e0e0>
<TD vAlign=top width="15%"><B>Property</B> </TD>
<TD vAlign=top width="85%"><B>Description</B> </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>Ignored</B> </TD>
<TD vAlign=top width="85%">Determines whether the issue is currently ignored. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>Rule</B> </TD>
<TD vAlign=top width="18%">Specifies the rule that generated the issue. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>TargetPage</B> </TD>
<TD vAlign=top width="18%">Specifies the page that is associated with the issue. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>TargetPageID</B> </TD>
<TD vAlign=top width="85%">Specifies the ID of the page that is associated with the validation issue. </TD></TR>
<TR>
<TD vAlign=top width="15%"><B>TargetShape</B> </TD>
<TD vAlign=top width="85%">Specifies the shape that is associated with the validation issue. </TD></TR></TBODY></TABLE></P>
<H2>Validation methods for adding rule sets and rules</H2>
<P>Validation methods can be divided into different groups. We will start by describing the first group of methods, which allows developers to add validation rule sets and rules to a document. Typically, these methods are executed once to populate a template or diagram with validation rules. In fact, the rules can be pre-populated in a template, and then the template can be deployed to end-users without any solution code.</P>
<P>For each of the following API methods, we give a brief description on what the method does, along with an explanation of the method’s arguments. </P>
<H3>ValidationRuleSets.Add(NameU)</H3>
<P>Adds a new, empty <B>ValidationRuleSet</B> object to the <B>ValidationRuleSets</B> collection of the document.</P>
<UL>
<LI><I>NameU</I>: The universal name to assign to the new validation rule set. </LI></UL>
<H3>ValidationRules.Add(NameU)</H3>
<P>Adds a new, empty <B>ValidationRule</B> object to the <B>ValidationRules</B> collection of the document.</P>
<P mce_keep="true">&nbsp;</P>
<H3>Example</H3>
<P>The following VBA code adds a rule set and a rule that targets a shape to the active document.</P>
<P mce_keep="true">&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>Set vsoDocument = Visio.Activedocument</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>&nbsp;</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'Add a validation rule set to the document</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>Set vsoValidationRuleSet = vsoDocument.Validation.RuleSets.Add("Connectivity")</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>vsoValidationRuleSet.Description = "Verify that shapes are correctly connected in the document."</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>vsoValidationRuleSet.Enabled = True</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>vsoValidationRuleSet.RuleSetFlags = Visio.VisRuleSetFlags.visRuleSetDefault</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>&nbsp;</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'Add a validation rule to the document</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>Set vsoValidationRule = vsoValidationRuleSet.Rules.Add(“Unglued2DShape”)</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>vsoValidationRule.Category = "Shapes"</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>vsoValidationRule.Description = "This 2-dimensional shape is not connected to any other shape."</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>vsoValidationRule.Ignored = False</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>vsoValidationRule.TargetType = Visio.VisRuleTargets.visRuleTargetShape</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>&nbsp;</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'The validation function Is1D() returns a Boolean value indicating whether the shape is</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'1D (True) or 2D (False)</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>vsoValidationRule.FilterExpression = "NOT(Is1D())"</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>&nbsp;</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'The validation function GLUEDSHAPES returns a set of shapes glued to the shape.</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'It takes as input one parameter indicating the direction of the glue.</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'The direction values are equivalent to members of VisGluedShapesFlags:</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'0 = visGluedShapesAll1D and 3 = visGluedShapesAll2D</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'The validation function AGGCOUNT takes a set of shapes as its input, and returns</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'the number of shapes in the set.</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>vsoValidationRule.TestExpression = "AGGCOUNT(GLUEDSHAPES(0)) + AGGCOUNT(GLUEDSHAPES(3)) &gt; 0"</TD></TR></TBODY></TABLE>
<H2>Validation methods for managing issues</H2>
<P>When you set the <B>TargetType</B>, <B>FilterExpression</B> and <B>TestExpression</B> of a rule, Visio will manage issues associated with the rule for you. For very complex validation rules, it will be easier to omit these properties and write the validation logic in solution code. For this approach, the solution should listen for the appropriate <B>RuleSetValidated</B> event and use its own logic to determine the list of issues to add to the document.</P>
<P>We give a brief description of the two key methods that you will use to manage issues, along with an explanation of the method’s arguments.</P>
<H3>ValidationRule.AddIssue([TargetPage],[TargetShape])</H3>
<P>Creates a new validation issue that is based on the validation rule, and adds it to the document.</P>
<UL>
<LI><I>TargetPage(Optional):</I> The page that either has the issue or has the shape with the issue. </LI>
<LI><I>TargetShape(Optional):</I> The shape that has the issue. </LI></UL>
<H3>ValidationIssue.Delete()</H3>
<P>Deletes the <B>ValidationIssue</B> object from the document.</P>
<P mce_keep="true">&nbsp;</P>
<H3>Example</H3>
<P>The following VBA code adds an issue to an existing rule. It assumes that vsoValidationRule is a valid <B>Visio.ValidationRule</B> object, vsoShape is a valid <B>Visio.Shape</B> object and vsoPage is a valid <B>Visio.Page</B> object.</P>
<TABLE cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'Add a custom issue to the vsoValidationRule validation rule and associate it with </TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'shape vsoShape on page vsoPage</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>Set vsoValidationIssue = vsoValidationRule.AddIssue(vsoPage, vsoShape)</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>vsoValidationIssue.Ignored = False</TD></TR></TBODY></TABLE>
<H2>Using the API to validate a document</H2>
<P>If you have a custom solution that needs a certain diagram structure to function properly, you can use the <B>Validation.Validate</B> method to validate the diagram and raise issues to end-users. This method validates a particular validation rule set (if specified) and updates the <B>Validation. LastValidatedDate</B> property. It will also trigger the <B>RuleSetValidated</B> event. It is recommended that you omit the rule set parameter, and validate against all active rule sets. This gives end-users a clear and consistent view of the issues currently in their document.</P>
<H3>Validation.Validate([RuleSet As ValidationRuleSet], [Flags As VisValidationFlags]) </H3>
<P>Validates the specified validation rule set.</P>
<UL>
<LI><I>RuleSet (Optional):</I> The rule set to validate across the entire document. </LI>
<LI><I>Flags (Optional)</I>: Whether to open the Issues window after validation. </LI></UL>
<P mce_keep="true">&nbsp;</P>
<H3>Example</H3>
<P>The following VBA code validates all rule sets in the document and launches the <B>Issues</B> window.</P>
<TABLE cellSpacing=0 cellPadding=0>
<TBODY>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>'Validate the document</TD></TR>
<TR>
<TD width=20>&nbsp;</TD>
<TD bgColor=#f0f0f0>Call Visio.Activedocument.Validation.Validate(, Visio.VisValidationFlags.visValidationDefault)</TD></TR></TBODY></TABLE>
<H2><A title=DefiningValidationRule name=DefiningValidationRule></A>Defining ValidationRule.FilterExpression and ValidationRule.TestExpression</H2>
<P>When you validate a diagram by calling the <B>Validation.Validate</B> method or by clicking <B>Check Diagram</B> on the <B>Process</B> tab, Visio will automatically use any validation logic stored in the document to detect errors. This validation logic is expressed in the <B>ValidationRule.TargetType</B>, <B>ValidationRule.FilterExpression</B> and <B>ValidationRule.TestExpression </B>properties. The FilterExpression and TestExpression should be written as Boolean expressions that can be evaluated on every object of type TargetType. During validation of a rule, for every object of type TargetType, Visio uses the FilterExpression to determine whether the object must satisfy the validation rule. If the filter expression evaluates to True, Visio uses the TestExpression to determine whether to generate an issue for the object. If the filter expression evaluates to False, Visio does not apply the validation rule to the object. </P>
<P>The syntax for the FilterExpression and TestExpression properties are the same as that of a ShapeSheet expression (you can get more details <A href="../../../../visio/2006/06/16/how-it-all-began.htm" mce_href="http://blogs.msdn.com/visio/archive/2006/06/16/624406.aspx">here</A> and <A href="http://office.microsoft.com/en-us/visio/HP850503091033.htm" mce_href="http://office.microsoft.com/en-us/visio/HP850503091033.aspx">here</A> if you're unfamiliar with the ShapeSheet). For example, since NOT(IS1D()) is a valid Boolean expression for the ShapeSheet of a shape, "NOT(Is1D())" is a valid FilterExpression or TestExpression for a validation rule with TargetType = <B>Visio.VisRuleTargets.visRuleTargetShape</B>. In addition to the standard ShapeSheet functions, the following validation functions can be used in a FilterExpression or TestExpression.</P>
<TABLE border=1 cellSpacing=0 cellPadding=4>
<TBODY>
<TR bgColor=#e0e0e0>
<TD vAlign=top><B>Function</B> </TD>
<TD vAlign=top><B>Description</B> </TD></TR>
<TR>
<TD vAlign=top><B>Role()</B> </TD>
<TD vAlign=top>Returns an integer indicating the shape role: {Element = 0, Connector = 1, Container = 2, Callout = 4}. </TD></TR>
<TR>
<TD vAlign=top><B>OnLayer(<I>LayerName</I>)</B> </TD>
<TD vAlign=top>Returns a Boolean indicating whether the shape is a member of the specified layer. Returns a Boolean indicating whether layer exists on page if called on a Page. </TD></TR>
<TR>
<TD vAlign=top><B>ConnectedShapes(<I>Direction</I>)</B> </TD>
<TD vAlign=top>Returns the set of shapes, matching the Direction criteria, connected to the shape. </TD></TR>
<TR>
<TD vAlign=top><B>GluedShapes(Direction)</B> </TD>
<TD vAlign=top>Returns the set of shapes, matching the Direction criteria, glued to the shape. </TD></TR>
<TR>
<TD vAlign=top><B>ContainerMembers()</B> </TD>
<TD vAlign=top>Returns the set of shapes that are members of the <A href="../../../../visio//2009/08/25/organizing-diagrams-with-containers.htm" mce_href="http://blogs.msdn.com/visio/archive/2009/08/25/organizing-diagrams-with-containers.aspx">container</A> / list shape. </TD></TR>
<TR>
<TD vAlign=top><B>ListMembers()</B> </TD>
<TD vAlign=top>Returns the set of shapes that are members of the list shape. </TD></TR>
<TR>
<TD vAlign=top><B>Callouts()</B> </TD>
<TD vAlign=top>Returns the set of shapes that are <A href="../../../../visio//2009/10/06/annotating-diagrams-with-callouts-in-visio-2010.htm" mce_href="http://blogs.msdn.com/visio/archive/2009/10/06/annotating-diagrams-with-callouts-in-visio-2010.aspx">callouts</A> on the shape. </TD></TR>
<TR>
<TD vAlign=top><B>ParentContainers()</B> </TD>
<TD vAlign=top>Returns the set of containers that the shape belongs to. </TD></TR>
<TR>
<TD vAlign=top><B>ShapesOnPage()</B> </TD>
<TD vAlign=top>Returns the set of top-level shapes on page. If no page specifier precedes the function, the shape’s containing page is assumed. </TD></TR>
<TR>
<TD vAlign=top><B>AggCount(<I>Set</I>)</B> </TD>
<TD vAlign=top>Counts the number of shapes in a set. </TD></TR>
<TR>
<TD vAlign=top><B>FilterSet(<I>Set,FilterExpression</I>)</B> </TD>
<TD vAlign=top>Returns the subset of shapes in a set that match an expression. </TD></TR>
<TR>
<TD vAlign=top><B>OnBoundaryOf()</B> </TD>
<TD vAlign=top>Returns the set of containers such that the shape is on the boundary of these containers. </TD></TR></TBODY></TABLE>
<P>The validation expression functions <STRONG>ConnectedShapes</STRONG> and <STRONG>GluedShapes</STRONG> correspond to <A href="../../../../visio/2009/09/23/the-visio-2010-connectivity-api.htm" mce_href="http://blogs.msdn.com/visio/archive/2009/09/22/the-visio-2010-connectivity-api.htm">connectivity API</A> functions with the same names. Similarly, the possible values of the <I>Direction</I> input parameter for <STRONG>ConnectedShapes</STRONG> and <STRONG>GluedShapes</STRONG> correspond to the <STRONG>VisConnectedShapesFlags</STRONG> and <STRONG>VisGluedShapesFlags</STRONG> enumerations, respectively.</P>
<H2>Feedback welcome!</H2>
<P>We hope that this overview of the validation API provides the necessary details to start writing your own validation rules. We’re interested to hear what developers think of this API functionality, so please use the <A href="http://blogs.technet.com/office2010/archive/2009/07/15/tell-us-what-you-think-about-office-2010-technical-preview.htm" mce_href="http://blogs.technet.com/office2010/archive/2009/07/15/tell-us-what-you-think-about-office-2010-technical-preview.aspx">Send a Smile feedback tool</A> or leave a comment below.</P></p>
	</div><!-- .entry-content -->
<hr>

</article><!-- #post-## -->
</div><!-- #single-content -->
</div><!-- #primary -->
<!-- Before Navigation --></main><!-- #site-main -->

<a class=""""screen-reader-shortcut"""" href=""""#primary"""" tabindex=""""1""""></a> 

<div id=""secondary"" class=""sidebar col-sm-3"">
	<div id=""sidebar-widget-area"" class=""sidebar-widget-area"" role=""complementary"">
		<div class=""widget sfmsb_widget"">

		</div>
		<aside id="tag_cloud-2" class="widget widget_tag_cloud">
</aside>
<aside id="msdn-archive-widget-2" class="widget msdn-archive-widget"><h2 class="widget-title">Archives</h2>	
	<li><a href='..\..\..\years\2018\index.htm'>All of 2018</a>&nbsp;(5)</li>
	<li><a href='..\..\..\years\2017\index.htm'>All of 2017</a>&nbsp;(8)</li>
	<li><a href='..\..\..\years\2016\index.htm'>All of 2016</a>&nbsp;(3)</li>
	<li><a href='..\..\..\years\2012\index.htm'>All of 2012</a>&nbsp;(2)</li>
	<li><a href='..\..\..\years\2011\index.htm'>All of 2011</a>&nbsp;(11)</li>
	<li><a href='..\..\..\years\2010\index.htm'>All of 2010</a>&nbsp;(35)</li>
	<li><a href='..\..\..\years\2009\index.htm'>All of 2009</a>&nbsp;(50)</li>
	<li><a href='..\..\..\years\2008\index.htm'>All of 2008</a>&nbsp;(11)</li>
	<li><a href='..\..\..\years\2007\index.htm'>All of 2007</a>&nbsp;(26)</li>
	<li><a href='..\..\..\years\2006\index.htm'>All of 2006</a>&nbsp;(46)</li>
</aside>
</div><!-- #secondary -->
</div><!-- .site-content -->
</div>

<footer id="site-footer" class="site-footer row" role="contentinfo">
	<div id="site-info" class="site-info">
		<div id="footer-text" class="col-sm-4 col-sm-offset-6">
			<span>
				<a href="https://privacy.microsoft.com" data-mscc-ic="false">Privacy</a>
			</span>
			<span>
				<a href="https://msdn.microsoft.com/cc300389" data-mscc-ic="false">Terms of Use</a>
			</span>
			<span>
				<a href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" data-mscc-ic="false">Trademarks</a>
			</span>
		</div>
		<div id="footer-far" class="col-sm-2">
			<div id="footer-microsoft-logo">
				<a href="https://www.microsoft.com" aria-label="Microsoft Logo">
					<svg id="footer-microsoft-logo-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 347 70.5" enable-background="new 0 0 347 70.5"><g fill="#fff"><path d="M39.5 44.6l-2.8 7.9h-.2c-.5-1.8-1.3-4.5-2.7-7.8l-15-37.7h-14.7v60h9.7v-37c0-2.3 0-5-.1-8.2-.1-1.6-.2-2.9-.3-3.8h.2c.5 2.3 1 4 1.4 5.1l18 43.8h6.8l17.9-44.2c.4-1 .8-3 1.2-4.7h.2c-.2 4.4-.4 8.4-.5 10.8v38.1h10.4v-60h-14.1l-15.4 37.7zM78.8 23.9h10.1v43h-10.1zM83.9 5.7c-1.7 0-3.1.6-4.3 1.7-1.2 1.1-1.8 2.5-1.8 4.2 0 1.6.6 3 1.8 4.1 1.2 1.1 2.6 1.6 4.3 1.6 1.7 0 3.2-.6 4.3-1.6 1.2-1.1 1.8-2.5 1.8-4.1 0-1.6-.6-3-1.8-4.2-1-1.2-2.5-1.7-4.3-1.7M124.7 23.5c-1.9-.4-3.8-.6-5.7-.6-4.6 0-8.8 1-12.3 3s-6.3 4.8-8.1 8.3c-1.9 3.6-2.8 7.7-2.8 12.4 0 4.1.9 7.8 2.7 11.1 1.8 3.3 4.3 5.9 7.6 7.7 3.2 1.8 6.9 2.7 11.1 2.7 4.8 0 8.9-1 12.2-2.9l.1-.1v-9.3l-.4.3c-1.5 1.1-3.2 2-4.9 2.6-1.8.6-3.4.9-4.8.9-4 0-7.2-1.2-9.5-3.7s-3.5-5.9-3.5-10.2c0-4.4 1.2-7.9 3.6-10.5 2.4-2.6 5.6-3.9 9.5-3.9 3.3 0 6.6 1.1 9.6 3.3l.4.3v-9.8l-.1-.1c-1.2-.6-2.8-1.1-4.7-1.5M158 23.2c-2.5 0-4.8.8-6.8 2.4-1.7 1.4-2.9 3.4-3.9 5.8h-.1v-7.4h-10.1v43h10.1v-22c0-3.7.8-6.8 2.5-9.1s3.9-3.5 6.5-3.5c.9 0 1.9.2 3 .4 1.1.3 1.9.6 2.4 1l.4.3v-10.2l-.2-.1c-.8-.4-2.1-.6-3.8-.6M185.5 22.9c-7.1 0-12.7 2.1-16.7 6.2s-6 9.8-6 16.9c0 6.7 2 12.1 5.9 16.1 3.9 3.9 9.2 5.9 15.8 5.9 6.9 0 12.4-2.1 16.4-6.3 4-4.2 6-9.8 6-16.7 0-6.8-1.9-12.3-5.7-16.2-3.7-3.9-9-5.9-15.7-5.9m8 33.1c-1.9 2.4-4.8 3.6-8.5 3.6s-6.6-1.2-8.7-3.7c-2.1-2.4-3.1-5.9-3.1-10.3 0-4.6 1.1-8.1 3.1-10.6 2.1-2.5 5-3.7 8.6-3.7 3.6 0 6.4 1.2 8.4 3.6 2 2.4 3.1 5.9 3.1 10.5s-1 8.2-2.9 10.6M229.3 41.7c-3.2-1.3-5.2-2.3-6.1-3.2-.8-.8-1.2-1.9-1.2-3.3 0-1.2.5-2.3 1.6-3.1 1.1-.8 2.5-1.2 4.4-1.2 1.7 0 3.5.3 5.2.8 1.7.5 3.3 1.2 4.5 2.1l.4.3v-9.4l-.2-.1c-1.2-.5-2.7-.9-4.6-1.3-1.9-.3-3.6-.5-5-.5-4.8 0-8.8 1.2-11.9 3.7-3.1 2.4-4.6 5.7-4.6 9.5 0 2 .3 3.8 1 5.3s1.7 2.9 3.1 4c1.4 1.1 3.4 2.3 6.2 3.5 2.3 1 4.1 1.8 5.2 2.4 1.1.6 1.8 1.3 2.3 1.9.4.6.6 1.4.6 2.4 0 2.9-2.2 4.3-6.6 4.3-1.7 0-3.5-.3-5.6-1-2.1-.7-4-1.7-5.7-2.9l-.4-.3v9.9l.2.1c1.5.7 3.3 1.2 5.4 1.7 2.2.4 4.1.7 5.8.7 5.2 0 9.5-1.2 12.5-3.7 3.1-2.5 4.7-5.7 4.7-9.8 0-2.9-.8-5.4-2.5-7.4-1.8-2-4.7-3.8-8.7-5.4M267.6 22.9c-7.1 0-12.7 2.1-16.7 6.2s-6 9.8-6 16.9c0 6.7 2 12.1 5.9 16.1 3.9 3.9 9.2 5.9 15.8 5.9 6.9 0 12.4-2.1 16.4-6.3 4-4.2 6-9.8 6-16.7 0-6.8-1.9-12.3-5.7-16.2-3.8-3.9-9.1-5.9-15.7-5.9m8 33.1c-1.9 2.4-4.8 3.6-8.5 3.6s-6.6-1.2-8.7-3.7c-2.1-2.4-3.1-5.9-3.1-10.3 0-4.6 1.1-8.1 3.1-10.6 2.1-2.5 5-3.7 8.6-3.7 3.5 0 6.4 1.2 8.4 3.6 2 2.4 3.1 5.9 3.1 10.5s-1 8.2-2.9 10.6"/><path d="M342.9 32.2v-8.2h-10.2v-12.9l-.3.1-9.6 2.9-.2.1v9.7h-15.2v-5.4c0-2.5.6-4.4 1.7-5.7 1.1-1.3 2.7-1.9 4.7-1.9 1.4 0 2.9.3 4.5 1l.4.2v-8.7l-.2-.1c-1.4-.5-3.3-.8-5.7-.8-3 0-5.7.7-8.1 1.9-2.4 1.3-4.2 3.1-5.5 5.5-1.3 2.3-2 5-2 8v6h-7.2v8.2h7.1v34.8h10.2v-34.7h15.2v22.1c0 9.1 4.3 13.7 12.8 13.7 1.4 0 2.9-.2 4.3-.5 1.5-.3 2.6-.7 3.2-1l.1-.1v-8.3l-.4.3c-.6.4-1.2.7-2.1.9-.8.2-1.5.3-2 .3-2 0-3.4-.5-4.4-1.6-.9-1.1-1.4-2.9-1.4-5.5v-20.3h10.3z"/></g></svg>
				</a>
			</div>
			<div id="copyright">
				© 2006 - 2018 Microsoft
			</div>
		</div>
	</div><!-- .site-info -->
</footer><!-- .site-footer -->

</div><!-- .site -->

</body>
</html>