<!DOCTYPE html>
<html lang="en-US">
<head>
              <meta charset="UTF-8">
	<meta name="viewport" content="width=device-width">
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="stylesheet" href="https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.5/css/bootstrap.min.css">
<title>Working with Connected Diagrams Programmatically, part 1 &#8211; Visio Insights</title>
<link rel='dns-prefetch' href='//ajax.aspnetcdn.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel='stylesheet' id='wds-ratings-css'  href='https://blogs.msdn.microsoft.com/wp-content/plugins/wds-ratings/wds-ratings.css?ver=20161014' type='text/css' media='all' />
<link rel='stylesheet' id='microsoft-parent-style-css'  href='https://blogs.msdn.microsoft.com/wp-content/themes/microsoft/style.css?ver=02092017' type='text/css' media='all' />
<link rel='stylesheet' id='microsoft-child-style-css'  href='https://blogs.msdn.microsoft.com/wp-content/themes/microsoft-msdn/style.css?ver=04152016' type='text/css' media='all' />
	<div id='msccBanner' dir='ltr' data-site-name='uhf-TechNetBlogs' data-mscc-version='0.4.0' data-nver='aspnet-2.0.7' data-sver='0.1.2' class='cc-banner' role='alert'>
<link rel=""shortcut icon"" href=""https://i1.social.s-msft.com/Forums/GlobalResources/images/Technet/favicon.ico"">

<link rel="canonical" href="https://blogs.msdn.microsoft.com/visio/2011/07/13/working-with-connected-diagrams-programmatically-part-1/" />
<!-- og:title -->
<meta property="og:title" content="Working with Connected Diagrams Programmatically, part 1" />
<!-- og:description -->
<meta property="og:description" content="In a previous blog post, we told you about the new Connectivity APIs in Visio 2010 that make it easier for developers to create and to move across a connected diagram. We’ve shown you how to use some of the new APIs to create new connected shapes (see here); now we’ll examine techniques for traversing..." />
</head>
<body class="post-template-default single single-post postid-63 single-format-standard">
<div id="page" class="site container-fluid">
	<header id="site-header" class="site-header row" role="banner">
		<div id="site-header-global-wrapper" class="site-header-global-wrapper">
			<div id="site-header-global" class="site-header-global">
				<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#site-profile-menu" aria-label="toggle menu" tabindex="0" aria-expanded="false">
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				</button>
				<div id="site-logo" class="col-sm-5 row navbar-header">
					<div id="header-microsoft-logo">
						<a id="home-link" href="https://www.microsoft.com/" tabindex="1" aria-label="Microsoft logo">
							<img id="header-microsoft-logo-svg" src="https://blogs.msdn.microsoft.com/visio/wp-content/themes/microsoft/images/ms-logo-gray.svg" alt="Microsoft logo">
							<span id="brand">
								<span id="brand-separator">|</span>
								<span id="brand-name"></span>
							</span>
						</a>
					</div>
				</div>
				<div id="site-header-global-right" class="col-sm-7">
				</div>
			</div>

		</div>
		<div id="site-header-blog-wrapper" class="site-header-blog-wrapper ms-blog-header clear-both">
			<div id="site-header-blog" class="site-header-blog">
				<nav class="navbar navbar-inverse">
					<div id="blog-logo-area" class="navbar-header">
						<div id="blog-logo" data-toggle="collapse" data-target="#blog-menu" tabindex="0" aria-label="blog logo">
														<div id="blog-logo-text">
<h1 class="site-title ms-blog-title">
					<a href="https://blogs.msdn.microsoft.com/visio" class="for-desktop">
						Visio Insights					</a>
					<a href="https://blogs.msdn.microsoft.com/visio" class="for-mobile">
						Visio Insights					</a>
				</h1>
<!-- blog description -->
<p class="site-description ms-blog-description">The official blog of the Microsoft Visio product team</p>
			</div>
									</div>
					</div>
									</nav>
			</div>
			
		</div>
		<div id="site-content" class="site-content row">

	<div id="primary" class="content-area col-sm-9">
	<main id="site-main" class="site-main" role="main">
		<div id="single-content" class="div-content">
<!-- Post start -->
<article id="post-63" class="post-63 post type-post status-publish format-standard hentry category-uncategorized tag-all-posts tag-programming tag-visio-2010">
	<header class="entry-header">
<h1 class="entry-title">Working with Connected Diagrams Programmatically, part 1</h1>
<div class="entry-meta">
<span class="byline"><span class="author vcard"><a class="url fn n profile-usercard-hover" data-profile-userid="eb78383b108c4193a0a593011dd29f8e" href="https://social.msdn.microsoft.com/profile/Visio+Team">Visio Team</a></span>
</span><span class="posted-on posted-on-margin">
			<span class="screen-reader-text"></span>
<time class="entry-date published updated" datetime="2011-07-13T10:00:00+00:00">July 13, 2011</time>
			</span>
		</div>
		<hr>
	</header><!-- .entry-header -->
<div class="entry-content single">
		<p>In a <a href="http://blogs.msdn.com/b/visio/archive/2009/09/22/the-visio-2010-connectivity-api.aspx">previous blog post</a>, we told you about the new Connectivity APIs in Visio 2010 that make it easier for developers to create and to move across a connected diagram. We’ve shown you how to use some of the new APIs to create new connected shapes (<a href="http://blogs.msdn.com/b/officedevdocs/archive/2010/10/01/use-the-page-dropconnected-method-to-connect-a-shape-dropped-on-the-page-in-visio-2010.aspx">see here</a>); now we’ll examine techniques for traversing connected diagrams. One of the most useful APIs for analyzing a connected diagram is the <a href="http://msdn.microsoft.com/en-us/library/ff767122.aspx"><b>Shape.ConnectedShapes</b></a> method, which allows you to get a reference to the shapes connected to a shape. </p>
<p>Let’s take a look at a specific scenario to demonstrate how this method can be used to walk through a connected diagram. Imagine that you have a simple project plan, created using the Basic Flowchart template:</p>
<p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/00/64/06/metablogapi/5468.clip_image002_027DA685.jpg" original-url="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-00-64-06-metablogapi/5468.clip_5F00_image002_5F00_027DA685.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="clip_image002" border="0" alt="clip_image002" src="6557.clip_image002_thumb_743F2D94.jpg" original-url="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-00-64-06-metablogapi/6557.clip_5F00_image002_5F00_thumb_5F00_743F2D94.jpg" width="377" height="484" /></a></p>
<p>In the shape data, each task in the flowchart includes a start date and an end date by which the task must be completed (shown in the chart below).<br />
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="133">
<p><b>Shape name</b></p>
</td>
<td valign="top" width="192">
<p><b>Shape text</b></p>
</td>
<td valign="top" width="132">
<p><b>Start date</b></p>
</td>
<td valign="top" width="174">
<p><b>End date</b></p>
</td>
</tr>
<tr>
<td valign="top" width="133">
<p><b>Start/End</b></p>
</td>
<td valign="top" width="192">
<p>“Begin”</p>
</td>
<td valign="top" width="132">
<p>6/30/2011</p>
</td>
<td valign="top" width="174">
<p>6/30/2011</p>
</td>
</tr>
<tr>
<td valign="top" width="133">
<p><b>Process</b></p>
</td>
<td valign="top" width="192">
<p>“Assess needs for project”</p>
</td>
<td valign="top" width="132">
<p>7/5/2011</p>
</td>
<td valign="top" width="174">
<p>7/11/2011</p>
</td>
</tr>
<tr>
<td valign="top" width="133">
<p><b>Decision</b></p>
</td>
<td valign="top" width="192">
<p>“Is project well-defined?”</p>
</td>
<td valign="top" width="132">
<p>7/8/2011</p>
</td>
<td valign="top" width="174">
<p>7/8/2011</p>
</td>
</tr>
<tr>
<td valign="top" width="133">
<p><b>Process.6</b></p>
</td>
<td valign="top" width="192">
<p>“Re-evaluate needs”</p>
</td>
<td valign="top" width="132">
<p>7/7/2011</p>
</td>
<td valign="top" width="174">
<p>7/11/2011</p>
</td>
</tr>
<tr>
<td valign="top" width="133">
<p><b>Process.4</b></p>
</td>
<td valign="top" width="192">
<p>“Build a prototype”</p>
</td>
<td valign="top" width="132">
<p>7/11/2011</p>
</td>
<td valign="top" width="174">
<p>7/18/2011</p>
</td>
</tr>
<tr>
<td valign="top" width="133">
<p><b>Start/End.11</b></p>
</td>
<td valign="top" width="192">
<p>“Prototype complete”</p>
</td>
<td valign="top" width="132">
<p>7/29/2011</p>
</td>
<td valign="top" width="174">
<p>7/29/2011</p>
</td>
</tr>
</tbody>
</table>
<p>Ideally, no task in this project should start before the previous task has been completed. You could select each shape and compare the start and end dates in the <b>Shape Data</b> window, but the process would be very manual and tiresome. You could even use <a href="http://office.microsoft.com/en-us/visio-help/enhance-your-data-with-data-graphics-HA010379394.aspx">Data Graphics</a> to display the start and end dates next to each shape, but it would still require visually inspecting each pair of connected shapes in the drawing.</p>
<p>With the <b>ConnectedShapes</b> method, however, you can write code that walks through each connected shape in your drawing and examine the shapes connected to it. The method returns an array of the shape IDs of all the shapes connected to a shape, filtered by the type of relationship between the shapes (e.g. is the connector “going out” to the other shape or “coming in” from the other shape?). You can also narrow down the returned IDs further by specifying a shape category as an additional filter.</p>
<p>Here’s some simple VBA that will iterate through each connected shape in a diagram and change the fill color of a connected shape if there is unwanted overlap between its start date and the task “before” it.</p>
<p><font size="2" face="Consolas">Dim vsoPage As Visio.Page      <br />Dim shapeList       </p>
<p>Sub TraverseFlowchart()       </p>
<p>&#160;&#160;&#160; Dim vsoShape1 As Visio.Shape       <br />&#160;&#160;&#160; Dim shapeIDArray() As Integer       <br />&#160;&#160;&#160; Dim searching As Boolean       </p>
<p>&#160;&#160;&#160; Set vsoPage = Application.ActivePage       <br />&#160;&#160;&#160; Set vsoShape1 = vsoPage.Shapes(&quot;Start/End&quot;)       <br />&#160;&#160;&#160; Set shapeList = CreateObject(“Scripting.Dictionary”)       <br />&#160;&#160;&#160; shapeList.Add vsoShape1.Name, 1       </p>
<p>&#160;&#160;&#160; GetConnectedShapes vsoShape1       </p>
<p>End Sub       </p>
<p>Sub GetConnectedShapes(shape As Visio.shape)       </p>
<p>&#160;&#160;&#160; Dim outgoingShape As Visio.shape       <br />&#160;&#160;&#160; Dim shapeIDArray As Variant       <br />&#160;&#160;&#160; Dim shapeIDArrayNext As Variant       <br />&#160;&#160;&#160; Dim outgoingNodes As Integer       <br />&#160;&#160;&#160; Dim node As Integer       <br />&#160;&#160;&#160; Dim prevTaskEnd As Date       <br />&#160;&#160;&#160; Dim nextTaskStart As Date       <br />&#160;&#160;&#160; Dim beenChecked As Boolean       </p>
<p>&#160;&#160;&#160; prevTaskEnd = shape.Cells(&quot;Prop.EndDate&quot;).result(visDate)       <br />&#160;&#160;&#160; shapeIDArray = shape.ConnectedShapes(visConnectedShapesOutgoingNodes, &quot;&quot;)       <br />&#160;&#160;&#160; <br />&#160;&#160;&#160; If (UBound(shapeIDArray) &gt;= 0) Then       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; outgoingNodes = UBound(shapeIDArray)       </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160; For node = 0 To outgoingNodes       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Set outgoingShape = vsoPage.Shapes(shapeIDArray(node))       </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; nextTaskStart = outgoingShape.Cells(&quot;Prop.StartDate&quot;).result(visDate)       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Debug.Print shape.Name &amp; &quot; end: &quot; &amp; prevTaskEnd &amp; &quot;; &quot; &amp; _       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; outgoingShape.Name &amp; &quot; start: &quot; &amp; nextTaskStart       </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; If (nextTaskStart &lt; prevTaskEnd) Then&#160; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; outgoingShape.Cells(&quot;FillForegnd&quot;).Formula = &quot;RGB(255, 0, 0)&quot;       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; End If       </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; shapeIDArrayNext = outgoingShape.ConnectedShapes(visConnectedShapesOutgoingNodes, &quot;&quot;)       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; beenChecked = shapeList.Exists(outgoingShape.Name)       </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; If ((UBound(shapeIDArrayNext) &gt;= 0) And Not beenChecked) Then       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; shapeList.Add outgoingShape.Name, 1       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; GetConnectedShapes outgoingShape       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; End If       <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; Next node       </p>
<p>&#160;&#160;&#160; End If       </p>
<p>End Sub</font></p>
<p>If we run this code on the project plan shown above, we get a result as shown below. Notice that the two shapes that have start dates that are earlier than the previous tasks’ end dates have a red fill applied to them.</p>
<p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/00/64/06/metablogapi/2350.clip_image004_48FA968D.jpg" original-url="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-00-64-06-metablogapi/2350.clip_5F00_image004_5F00_48FA968D.jpg"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="clip_image004" border="0" alt="clip_image004" src="6545.clip_image004_thumb_5AD72A5A.jpg" original-url="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-00-64-06-metablogapi/6545.clip_5F00_image004_5F00_thumb_5F00_5AD72A5A.jpg" width="376" height="484" /></a></p>
<p>In the code sample, the <i>GetConnectedShapes</i> subroutine uses the <b>ConnectedShapes</b> method on the shape passed in as an argument to get an array of the shape IDs (integers) of the shapes that it connects to. (That is, the shape contains the beginning connection of a connector that points to the shapes referenced by the IDs in the array.) Then the subroutine iterates through each shape referenced by the IDs in the array. Next, the value of the “Prop.StartDate” cell of each attached shape is compared to the “Prop.EndDate” cell of the first shape. If the values overlap, the value of “FillForegnd” cell is changed to red.</p>
<p>This code sample also uses the <b>ConnectedShapes</b> method to traverse the connected diagram in a manner similar to “walking” a tree data structure, starting from a specific shape (the first Start/End shape). After it analyzes a shape and one of its attached shapes, the <i>GetConnectedShapes</i> subroutine checks whether the attached shape has any shapes that it connects out to (making another call to <b>ConnectedShapes</b>). If so, the subroutine makes a recursive call to itself (and thereby halting the execution of the original call), passing in the attached shape as an argument. In practice, it is likely that you will need to use this programming technique in conjunction with the <b>ConnectedShapes</b> method in order to work all the way through each shape in a large connected diagram.</p>
<p>(Also notice that the code sample keeps track of each shape whose outgoing nodes have been checked by adding the shape to a dictionary object before the GetConnectedShapes subroutine is called. This will prevent the code from becoming stuck in an infinite loop if the diagram includes a circular reference.)</p>
<p>Even though we’ve used a project plan scenario as the example in this code sample, there are many other practical applications for this technique. In a related but larger sense, you could incorporate this technique within a custom validation checker to determine whether a connected diagram has been constructed correctly. Also similar to the code sample above, you could use this technique to extract and store data from each shape in a connected diagram. (Extending the project plan example, you could get the duration from each task in the workflow and then create a total of all the resource hours needed for the project.)</p>
<p>In the next blog post, we’ll look at another way that you can use this technique and the <a href="http://msdn.microsoft.com/en-us/library/ff767928.aspx"><b>Page.SplitConnector</b></a> method to add new shapes to a connected diagram.</p>
	</div><!-- .entry-content -->
<hr>

</article><!-- #post-## -->
</div><!-- #single-content -->
</div><!-- #primary -->
<!-- Before Navigation --></main><!-- #site-main -->

<a class=""""screen-reader-shortcut"""" href=""""#primary"""" tabindex=""""1""""></a> 

<div id=""secondary"" class=""sidebar col-sm-3"">
	<div id=""sidebar-widget-area"" class=""sidebar-widget-area"" role=""complementary"">
		<div class=""widget sfmsb_widget"">

		</div>
		<aside id="tag_cloud-2" class="widget widget_tag_cloud">
</aside>
<aside id="msdn-archive-widget-2" class="widget msdn-archive-widget"><h2 class="widget-title">Archives</h2>	
	<li><a href='..\..\..\years\2018\index.htm'>All of 2018</a>&nbsp;(5)</li>
	<li><a href='..\..\..\years\2017\index.htm'>All of 2017</a>&nbsp;(8)</li>
	<li><a href='..\..\..\years\2016\index.htm'>All of 2016</a>&nbsp;(3)</li>
	<li><a href='..\..\..\years\2012\index.htm'>All of 2012</a>&nbsp;(2)</li>
	<li><a href='..\..\..\years\2011\index.htm'>All of 2011</a>&nbsp;(11)</li>
	<li><a href='..\..\..\years\2010\index.htm'>All of 2010</a>&nbsp;(35)</li>
	<li><a href='..\..\..\years\2009\index.htm'>All of 2009</a>&nbsp;(50)</li>
	<li><a href='..\..\..\years\2008\index.htm'>All of 2008</a>&nbsp;(11)</li>
	<li><a href='..\..\..\years\2007\index.htm'>All of 2007</a>&nbsp;(26)</li>
	<li><a href='..\..\..\years\2006\index.htm'>All of 2006</a>&nbsp;(46)</li>
</aside>
</div><!-- #secondary -->
</div><!-- .site-content -->
</div>

<footer id="site-footer" class="site-footer row" role="contentinfo">
	<div id="site-info" class="site-info">
		<div id="footer-text" class="col-sm-4 col-sm-offset-6">
			<span>
				<a href="https://privacy.microsoft.com" data-mscc-ic="false">Privacy</a>
			</span>
			<span>
				<a href="https://msdn.microsoft.com/cc300389" data-mscc-ic="false">Terms of Use</a>
			</span>
			<span>
				<a href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" data-mscc-ic="false">Trademarks</a>
			</span>
		</div>
		<div id="footer-far" class="col-sm-2">
			<div id="footer-microsoft-logo">
				<a href="https://www.microsoft.com" aria-label="Microsoft Logo">
					<svg id="footer-microsoft-logo-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 347 70.5" enable-background="new 0 0 347 70.5"><g fill="#fff"><path d="M39.5 44.6l-2.8 7.9h-.2c-.5-1.8-1.3-4.5-2.7-7.8l-15-37.7h-14.7v60h9.7v-37c0-2.3 0-5-.1-8.2-.1-1.6-.2-2.9-.3-3.8h.2c.5 2.3 1 4 1.4 5.1l18 43.8h6.8l17.9-44.2c.4-1 .8-3 1.2-4.7h.2c-.2 4.4-.4 8.4-.5 10.8v38.1h10.4v-60h-14.1l-15.4 37.7zM78.8 23.9h10.1v43h-10.1zM83.9 5.7c-1.7 0-3.1.6-4.3 1.7-1.2 1.1-1.8 2.5-1.8 4.2 0 1.6.6 3 1.8 4.1 1.2 1.1 2.6 1.6 4.3 1.6 1.7 0 3.2-.6 4.3-1.6 1.2-1.1 1.8-2.5 1.8-4.1 0-1.6-.6-3-1.8-4.2-1-1.2-2.5-1.7-4.3-1.7M124.7 23.5c-1.9-.4-3.8-.6-5.7-.6-4.6 0-8.8 1-12.3 3s-6.3 4.8-8.1 8.3c-1.9 3.6-2.8 7.7-2.8 12.4 0 4.1.9 7.8 2.7 11.1 1.8 3.3 4.3 5.9 7.6 7.7 3.2 1.8 6.9 2.7 11.1 2.7 4.8 0 8.9-1 12.2-2.9l.1-.1v-9.3l-.4.3c-1.5 1.1-3.2 2-4.9 2.6-1.8.6-3.4.9-4.8.9-4 0-7.2-1.2-9.5-3.7s-3.5-5.9-3.5-10.2c0-4.4 1.2-7.9 3.6-10.5 2.4-2.6 5.6-3.9 9.5-3.9 3.3 0 6.6 1.1 9.6 3.3l.4.3v-9.8l-.1-.1c-1.2-.6-2.8-1.1-4.7-1.5M158 23.2c-2.5 0-4.8.8-6.8 2.4-1.7 1.4-2.9 3.4-3.9 5.8h-.1v-7.4h-10.1v43h10.1v-22c0-3.7.8-6.8 2.5-9.1s3.9-3.5 6.5-3.5c.9 0 1.9.2 3 .4 1.1.3 1.9.6 2.4 1l.4.3v-10.2l-.2-.1c-.8-.4-2.1-.6-3.8-.6M185.5 22.9c-7.1 0-12.7 2.1-16.7 6.2s-6 9.8-6 16.9c0 6.7 2 12.1 5.9 16.1 3.9 3.9 9.2 5.9 15.8 5.9 6.9 0 12.4-2.1 16.4-6.3 4-4.2 6-9.8 6-16.7 0-6.8-1.9-12.3-5.7-16.2-3.7-3.9-9-5.9-15.7-5.9m8 33.1c-1.9 2.4-4.8 3.6-8.5 3.6s-6.6-1.2-8.7-3.7c-2.1-2.4-3.1-5.9-3.1-10.3 0-4.6 1.1-8.1 3.1-10.6 2.1-2.5 5-3.7 8.6-3.7 3.6 0 6.4 1.2 8.4 3.6 2 2.4 3.1 5.9 3.1 10.5s-1 8.2-2.9 10.6M229.3 41.7c-3.2-1.3-5.2-2.3-6.1-3.2-.8-.8-1.2-1.9-1.2-3.3 0-1.2.5-2.3 1.6-3.1 1.1-.8 2.5-1.2 4.4-1.2 1.7 0 3.5.3 5.2.8 1.7.5 3.3 1.2 4.5 2.1l.4.3v-9.4l-.2-.1c-1.2-.5-2.7-.9-4.6-1.3-1.9-.3-3.6-.5-5-.5-4.8 0-8.8 1.2-11.9 3.7-3.1 2.4-4.6 5.7-4.6 9.5 0 2 .3 3.8 1 5.3s1.7 2.9 3.1 4c1.4 1.1 3.4 2.3 6.2 3.5 2.3 1 4.1 1.8 5.2 2.4 1.1.6 1.8 1.3 2.3 1.9.4.6.6 1.4.6 2.4 0 2.9-2.2 4.3-6.6 4.3-1.7 0-3.5-.3-5.6-1-2.1-.7-4-1.7-5.7-2.9l-.4-.3v9.9l.2.1c1.5.7 3.3 1.2 5.4 1.7 2.2.4 4.1.7 5.8.7 5.2 0 9.5-1.2 12.5-3.7 3.1-2.5 4.7-5.7 4.7-9.8 0-2.9-.8-5.4-2.5-7.4-1.8-2-4.7-3.8-8.7-5.4M267.6 22.9c-7.1 0-12.7 2.1-16.7 6.2s-6 9.8-6 16.9c0 6.7 2 12.1 5.9 16.1 3.9 3.9 9.2 5.9 15.8 5.9 6.9 0 12.4-2.1 16.4-6.3 4-4.2 6-9.8 6-16.7 0-6.8-1.9-12.3-5.7-16.2-3.8-3.9-9.1-5.9-15.7-5.9m8 33.1c-1.9 2.4-4.8 3.6-8.5 3.6s-6.6-1.2-8.7-3.7c-2.1-2.4-3.1-5.9-3.1-10.3 0-4.6 1.1-8.1 3.1-10.6 2.1-2.5 5-3.7 8.6-3.7 3.5 0 6.4 1.2 8.4 3.6 2 2.4 3.1 5.9 3.1 10.5s-1 8.2-2.9 10.6"/><path d="M342.9 32.2v-8.2h-10.2v-12.9l-.3.1-9.6 2.9-.2.1v9.7h-15.2v-5.4c0-2.5.6-4.4 1.7-5.7 1.1-1.3 2.7-1.9 4.7-1.9 1.4 0 2.9.3 4.5 1l.4.2v-8.7l-.2-.1c-1.4-.5-3.3-.8-5.7-.8-3 0-5.7.7-8.1 1.9-2.4 1.3-4.2 3.1-5.5 5.5-1.3 2.3-2 5-2 8v6h-7.2v8.2h7.1v34.8h10.2v-34.7h15.2v22.1c0 9.1 4.3 13.7 12.8 13.7 1.4 0 2.9-.2 4.3-.5 1.5-.3 2.6-.7 3.2-1l.1-.1v-8.3l-.4.3c-.6.4-1.2.7-2.1.9-.8.2-1.5.3-2 .3-2 0-3.4-.5-4.4-1.6-.9-1.1-1.4-2.9-1.4-5.5v-20.3h10.3z"/></g></svg>
				</a>
			</div>
			<div id="copyright">
				© 2011 - 2018 Microsoft
			</div>
		</div>
	</div><!-- .site-info -->
</footer><!-- .site-footer -->

</div><!-- .site -->

</body>
</html>